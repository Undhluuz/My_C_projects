<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ServiceStack.Interfaces</name>
    </assembly>
    <members>
        <member name="M:ServiceStack.AI.IPhrasesProvider.GetPhrasesAsync(System.Threading.CancellationToken)">
            <summary>
            Get Phrases to use
            </summary>
        </member>
        <member name="M:ServiceStack.AI.IPhraseWeightsProvider.GetPhraseWeightsAsync(System.Threading.CancellationToken)">
            <summary>
            Get Phrases and their Weights to use
            </summary>
        </member>
        <member name="T:ServiceStack.AI.IPromptProvider">
            <summary>
            The App Provider to use to generate TypeChat Schema and Prompts 
            </summary>
        </member>
        <member name="M:ServiceStack.AI.IPromptProvider.CreateSchemaAsync(System.Threading.CancellationToken)">
            <summary>
            Create a TypeChat TypeScript Schema from a TypeChatRequest
            </summary>
        </member>
        <member name="M:ServiceStack.AI.IPromptProvider.CreatePromptAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Create a TypeChat TypeScript Prompt from a User request
            </summary>
        </member>
        <member name="T:ServiceStack.AI.ISpeechToText">
            <summary>
            Abstraction for Speech-to-text Provider
            </summary>
        </member>
        <member name="M:ServiceStack.AI.ISpeechToText.InitAsync(ServiceStack.AI.InitSpeechToText,System.Threading.CancellationToken)">
            <summary>
            Once only task to run out-of-band before using the SpeechToText provider
            </summary>
        </member>
        <member name="M:ServiceStack.AI.ISpeechToText.TranscribeAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Transcribe the Audio at recordingPath and return a JSON API Result
            </summary>
        </member>
        <member name="T:ServiceStack.AI.InitSpeechToText">
            <summary>
            Configuration for initializing a Speech-to-Text provider.
            </summary>
        </member>
        <member name="P:ServiceStack.AI.InitSpeechToText.PhraseWeights">
            <summary>
            Gets or sets the phrase weights for the initialization (optional).
            </summary>    
        </member>
        <member name="T:ServiceStack.AI.TranscriptResult">
            <summary>
            Represents the result of a transcription.
            </summary>
        </member>
        <member name="P:ServiceStack.AI.TranscriptResult.Transcript">
            <summary>
            The transcribed text.
            </summary>
        </member>
        <member name="P:ServiceStack.AI.TranscriptResult.Confidence">
            <summary>
            The confidence level of the transcription.
            </summary>
        </member>
        <member name="P:ServiceStack.AI.TranscriptResult.ApiResponse">
            <summary>
            The JSON API Response of the Transcription 
            </summary>
        </member>
        <member name="P:ServiceStack.AI.TranscriptResult.ResponseStatus">
            <summary>
            Error Information if transcription was unsuccessful
            </summary>
        </member>
        <member name="T:ServiceStack.AI.ISpeechToTextFactory">
            <summary>
            Represents a factory for creating instances of <see cref="T:ServiceStack.AI.ISpeechToText"/>.
            </summary>
        </member>
        <member name="M:ServiceStack.AI.ISpeechToTextFactory.Get(System.String)">
            <summary>
            Gets an instance of <see cref="T:ServiceStack.AI.ISpeechToText"/> by name.
            </summary>
            <param name="name">The name of the Speech-to-Text provider instance to get.</param>
            <returns>An instance of <see cref="T:ServiceStack.AI.ISpeechToText"/> with the specified name.</returns>
        </member>
        <member name="T:ServiceStack.AI.ITypeChat">
            <summary>
            Abstraction to implement a TypeChat TypeScript Schema LLM provider
            </summary>
        </member>
        <member name="M:ServiceStack.AI.ITypeChat.TranslateMessageAsync(ServiceStack.AI.TypeChatRequest,System.Threading.CancellationToken)">
            <summary>
            Uses LLM provider to translates a TypeChat message instruction asynchronously.
            </summary>
            <param name="request">The TypeChat request to translate.</param>
            <param name="token">A cancellation token to cancel the operation (optional).</param>
            <returns>A task representing the asynchronous operation that returns a <see cref="T:ServiceStack.AI.TypeChatResponse"/>.</returns>
        </member>
        <member name="T:ServiceStack.AI.TypeChatTranslator">
            <summary>
            The kind of Response to expect, an action to execute or a JSON message
            </summary>
        </member>
        <member name="T:ServiceStack.AI.TypeChatRequest">
            <summary>
            Request to process a TypeChat Request
            </summary>
        </member>
        <member name="P:ServiceStack.AI.TypeChatRequest.Schema">
            <summary>
            TypeScript Schema
            </summary>
        </member>
        <member name="P:ServiceStack.AI.TypeChatRequest.Prompt">
            <summary>
            TypeChat Prompt
            </summary>
        </member>
        <member name="P:ServiceStack.AI.TypeChatRequest.UserMessage">
            <summary>
            Chat Request
            </summary>
        </member>
        <member name="P:ServiceStack.AI.TypeChatRequest.NodePath">
            <summary>
            Path to node exe (default node in $PATH)
            </summary>
        </member>
        <member name="P:ServiceStack.AI.TypeChatRequest.NodeProcessTimeoutMs">
            <summary>
            Timeout to wait for node script to complete (default 120s)
            </summary>
        </member>
        <member name="P:ServiceStack.AI.TypeChatRequest.ScriptPath">
            <summary>
            Path to node TypeChat script (default typechat.mjs)
            </summary>
        </member>
        <member name="P:ServiceStack.AI.TypeChatRequest.TypeChatTranslator">
            <summary>
            TypeChat Behavior we want to use (Json | Program)
            </summary>
        </member>
        <member name="P:ServiceStack.AI.TypeChatRequest.SchemaPath">
            <summary>
            Path to write TypeScript Schema to (default Temp File)
            </summary>
        </member>
        <member name="P:ServiceStack.AI.TypeChatRequest.WorkingDirectory">
            <summary>
            Which directory to execute the ScriptPath (default CurrentDirectory) 
            </summary>
        </member>
        <member name="T:ServiceStack.AI.TypeChatResponse">
            <summary>
            The result of an executed TypeChat request
            </summary>
        </member>
        <member name="P:ServiceStack.AI.TypeChatResponse.Result">
            <summary>
            JSON Response from a TypeChat Provider
            </summary>
        </member>
        <member name="P:ServiceStack.AI.TypeChatResponse.ResponseStatus">
            <summary>
            Error Information if transcription was unsuccessful
            </summary>
        </member>
        <member name="T:ServiceStack.AI.ITypeChatFactory">
            <summary>
            Represents a factory for creating instances of <see cref="T:ServiceStack.AI.ITypeChat"/>.
            </summary>
        </member>
        <member name="M:ServiceStack.AI.ITypeChatFactory.Get(System.String)">
            <summary>
            Gets an instance of <see cref="T:ServiceStack.AI.ITypeChat"/> by name.
            </summary>
            <param name="name">The name of the TypeChat instance to get.</param>
            <returns>An instance of <see cref="T:ServiceStack.AI.ITypeChat"/> with the specified name.</returns>
        </member>
        <member name="T:ServiceStack.ApiAllowableValuesAttribute">
            <summary>
            Document the allowable values for an API Property
            </summary>
        </member>
        <member name="P:ServiceStack.ApiAllowableValuesAttribute.Name">
            <summary>
            Gets or sets parameter name with which allowable values will be associated.
            </summary>
        </member>
        <member name="F:ServiceStack.GenerateBodyParameter.IfNotDisabled">
            <summary>
            Generates body DTO parameter only if `DisableAutoDtoInBodyParam = false`
            </summary>
        </member>
        <member name="F:ServiceStack.GenerateBodyParameter.Always">
            <summary>
            Always generate body DTO for request
            </summary>
        </member>
        <member name="F:ServiceStack.GenerateBodyParameter.Never">
            <summary>
            Never generate body DTO for request
            </summary>
        </member>
        <member name="T:ServiceStack.ApiAttribute">
            <summary>
            Document a short description for an API Type
            </summary>
        </member>
        <member name="P:ServiceStack.ApiAttribute.Description">
            <summary>
            The overall description of an API. Used by Swagger.
            </summary>
        </member>
        <member name="P:ServiceStack.ApiAttribute.BodyParameter">
            <summary>
            Create or not body param for request type when verb is POST or PUT.
            Value can be one of the constants of `GenerateBodyParam` class:
            `GenerateBodyParam.IfNotDisabled` (default value), `GenerateBodyParam.Always`, `GenerateBodyParam.Never`
            </summary>
        </member>
        <member name="P:ServiceStack.ApiAttribute.RequestContentType">
            <summary>
            Preferred Content-Type, e.g: application/json, multipart/form-data, application/x-www-form-urlencoded
            or [MimeTypes.Json, MimeTypes.MultiPartFormData, MimeTypes.FormUrlEncoded]
            </summary>
        </member>
        <member name="P:ServiceStack.ApiAttribute.IsRequired">
            <summary>
            Tells if body param is required
            </summary>
        </member>
        <member name="T:ServiceStack.ApiMemberAttribute">
            <summary>
            Document a short description for an API Property
            </summary>
        </member>
        <member name="P:ServiceStack.ApiMemberAttribute.Verb">
            <summary>
            Gets or sets verb to which applies attribute. By default applies to all verbs.
            </summary>
        </member>
        <member name="P:ServiceStack.ApiMemberAttribute.ParameterType">
            <summary>
            Gets or sets parameter type: It can be only one of the following: path, query, body, form, or header.
            </summary>
        </member>
        <member name="P:ServiceStack.ApiMemberAttribute.Name">
            <summary>
            Gets or sets unique name for the parameter. Each name must be unique, even if they are associated with different paramType values. 
            </summary>
            <remarks>
            <para>
            Other notes on the name field:
            If paramType is body, the name is used only for UI and code generation.
            If paramType is path, the name field must correspond to the associated path segment from the path field in the api object.
            If paramType is query, the name field corresponds to the query param name.
            </para>
            </remarks>
        </member>
        <member name="P:ServiceStack.ApiMemberAttribute.Description">
            <summary>
            Gets or sets the human-readable description for the parameter.
            </summary>
        </member>
        <member name="P:ServiceStack.ApiMemberAttribute.DataType">
            <summary>
            For path, query, and header paramTypes, this field must be a primitive. For body, this can be a complex or container datatype.
            </summary>
        </member>
        <member name="P:ServiceStack.ApiMemberAttribute.Format">
            <summary>
            Fine-tuned primitive type definition.  
            </summary>
        </member>
        <member name="P:ServiceStack.ApiMemberAttribute.IsRequired">
            <summary>
            For path, this is always true. Otherwise, this field tells the client whether or not the field must be supplied.
            </summary>
        </member>
        <member name="P:ServiceStack.ApiMemberAttribute.IsOptional">
            <summary>
            Explicitly declare a property to be optional
            </summary>
        </member>
        <member name="P:ServiceStack.ApiMemberAttribute.AllowMultiple">
            <summary>
            For query params, this specifies that a comma-separated list of values can be passed to the API. For path and body types, this field cannot be true.
            </summary>
        </member>
        <member name="P:ServiceStack.ApiMemberAttribute.Route">
            <summary>
            Gets or sets route to which applies attribute, matches using StartsWith. By default applies to all routes. 
            </summary>
        </member>
        <member name="P:ServiceStack.ApiMemberAttribute.ExcludeInSchema">
            <summary>
            Whether to exclude this property from being included in the ModelSchema
            </summary>
        </member>
        <member name="P:ServiceStack.IApiResponseDescription.StatusCode">
            <summary>
            The status code of a response
            </summary>
        </member>
        <member name="P:ServiceStack.IApiResponseDescription.Description">
            <summary>
            The description of a response status code
            </summary>
        </member>
        <member name="T:ServiceStack.ApiResponseAttribute">
            <summary>
            Document potential API Responses this API could return
            </summary>
        </member>
        <member name="P:ServiceStack.ApiResponseAttribute.StatusCode">
            <summary>
            HTTP status code of response
            </summary>
        </member>
        <member name="P:ServiceStack.ApiResponseAttribute.Description">
            <summary>
            End-user description of the data which is returned by response
            </summary>
        </member>
        <member name="P:ServiceStack.ApiResponseAttribute.IsDefaultResponse">
            <summary>
            If set to true, the response is default for all non-explicitly defined status codes 
            </summary>
        </member>
        <member name="P:ServiceStack.ApiResponseAttribute.ResponseType">
            <summary>
            Open API schema definition type for response
            </summary>
        </member>
        <member name="M:ServiceStack.MetadataAttributeBase.ShouldInclude(System.Reflection.PropertyInfo,System.String)">
            <summary>
            Don't include default bool or nullable int default values
            </summary>
        </member>
        <member name="T:ServiceStack.AttributeExtensions">
            <summary>
            Required in both ServiceStack .Common + .Client
            </summary>
        </member>
        <member name="T:ServiceStack.AuditBase">
            <summary>
            Useful base Data Model class for entities you want to maintain Audit information for.
            Property names match conventions used to populate Audit info in [AutoApply(Behavior.Audit*)] 
            </summary>
        </member>
        <member name="T:ServiceStack.Auth.IPasswordHasher">
            <summary>
            The Password Hasher provider used to hash users passwords, by default uses the same algorithm used by ASP.NET Identity v3:
            PBKDF2 with HMAC-SHA256, 128-bit salt, 256-bit subkey, 10000 iterations.
            </summary>
        </member>
        <member name="P:ServiceStack.Auth.IPasswordHasher.Version">
            <summary>
            The first byte marker used to specify the format used. The default implementation uses the following format:
            { 0x01, prf (UInt32), iter count (UInt32), salt length (UInt32), salt, subkey }
            </summary>
        </member>
        <member name="M:ServiceStack.Auth.IPasswordHasher.VerifyPassword(System.String,System.String,System.Boolean@)">
            <summary>
            Returns a boolean indicating whether the <paramref name="providedPassword"/> matches the <paramref name="hashedPassword"/>.
            The <paramref name="needsRehash"/> out parameter indicates whether the password should be re-hashed.
            </summary>
            <param name="hashedPassword">The hash value for a user's stored password.</param>
            <param name="providedPassword">The password supplied for comparison.</param>
            <remarks>Implementations of this method should be time consistent.</remarks>
        </member>
        <member name="M:ServiceStack.Auth.IPasswordHasher.HashPassword(System.String)">
            <summary>
            Returns a hashed representation of the supplied <paramref name="password"/>.
            </summary>
            <param name="password">The password to hash.</param>
            <returns>A hashed representation of the supplied <paramref name="password"/>.</returns>
        </member>
        <member name="T:ServiceStack.Caching.ICacheClient">
            <summary>
            A common interface implementation that is implemented by most cache providers
            </summary>
        </member>
        <member name="M:ServiceStack.Caching.ICacheClient.Remove(System.String)">
            <summary>
            Removes the specified item from the cache.
            </summary>
            <param name="key">The identifier for the item to delete.</param>
            <returns>
            true if the item was successfully removed from the cache; false otherwise.
            </returns>
        </member>
        <member name="M:ServiceStack.Caching.ICacheClient.RemoveAll(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Removes the cache for all the keys provided.
            </summary>
            <param name="keys">The keys.</param>
        </member>
        <member name="M:ServiceStack.Caching.ICacheClient.Get``1(System.String)">
            <summary>
            Retrieves the specified item from the cache.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">The identifier for the item to retrieve.</param>
            <returns>
            The retrieved item, or <value>null</value> if the key was not found.
            </returns>
        </member>
        <member name="M:ServiceStack.Caching.ICacheClient.Increment(System.String,System.UInt32)">
            <summary>
            Increments the value of the specified key by the given amount. 
            The operation is atomic and happens on the server.
            A non existent value at key starts at 0
            </summary>
            <param name="key">The identifier for the item to increment.</param>
            <param name="amount">The amount by which the client wants to increase the item.</param>
            <returns>
            The new value of the item or -1 if not found.
            </returns>
            <remarks>The item must be inserted into the cache before it can be changed. The item must be inserted as a <see cref="T:System.String"/>. The operation only works with <see cref="T:System.UInt32"/> values, so -1 always indicates that the item was not found.</remarks>
        </member>
        <member name="M:ServiceStack.Caching.ICacheClient.Decrement(System.String,System.UInt32)">
            <summary>
            Increments the value of the specified key by the given amount. 
            The operation is atomic and happens on the server.
            A non existent value at key starts at 0
            </summary>
            <param name="key">The identifier for the item to increment.</param>
            <param name="amount">The amount by which the client wants to decrease the item.</param>
            <returns>
            The new value of the item or -1 if not found.
            </returns>
            <remarks>The item must be inserted into the cache before it can be changed. The item must be inserted as a <see cref="T:System.String"/>. The operation only works with <see cref="T:System.UInt32"/> values, so -1 always indicates that the item was not found.</remarks>
        </member>
        <member name="M:ServiceStack.Caching.ICacheClient.Add``1(System.String,``0)">
            <summary>
            Adds a new item into the cache at the specified cache key only if the cache is empty.
            </summary>
            <param name="key">The key used to reference the item.</param>
            <param name="value">The object to be inserted into the cache.</param>
            <returns>
            true if the item was successfully stored in the cache; false otherwise.
            </returns>
            <remarks>The item does not expire unless it is removed due memory pressure.</remarks>
        </member>
        <member name="M:ServiceStack.Caching.ICacheClient.Set``1(System.String,``0)">
            <summary>
            Sets an item into the cache at the cache key specified regardless if it already exists or not.
            </summary>
        </member>
        <member name="M:ServiceStack.Caching.ICacheClient.Replace``1(System.String,``0)">
            <summary>
            Replaces the item at the cachekey specified only if an items exists at the location already. 
            </summary>
        </member>
        <member name="M:ServiceStack.Caching.ICacheClient.FlushAll">
            <summary>
            Invalidates all data on the cache.
            </summary>
        </member>
        <member name="M:ServiceStack.Caching.ICacheClient.GetAll``1(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Retrieves multiple items from the cache. 
            The default value of T is set for all keys that do not exist.
            </summary>
            <param name="keys">The list of identifiers for the items to retrieve.</param>
            <returns>
            a Dictionary holding all items indexed by their key.
            </returns>
        </member>
        <member name="M:ServiceStack.Caching.ICacheClient.SetAll``1(System.Collections.Generic.IDictionary{System.String,``0})">
            <summary>
            Sets multiple items to the cache. 
            </summary>
            <typeparam name="T"></typeparam>
            <param name="values">The values.</param>
        </member>
        <member name="M:ServiceStack.Caching.ICacheClientAsync.RemoveAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Removes the specified item from the cache.
            </summary>
            <param name="key">The identifier for the item to delete.</param>
            <returns>
            true if the item was successfully removed from the cache; false otherwise.
            </returns>
        </member>
        <member name="M:ServiceStack.Caching.ICacheClientAsync.RemoveAllAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Removes the cache for all the keys provided.
            </summary>
            <param name="keys">The keys.</param>
        </member>
        <member name="M:ServiceStack.Caching.ICacheClientAsync.GetAsync``1(System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieves the specified item from the cache.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">The identifier for the item to retrieve.</param>
            <returns>
            The retrieved item, or <value>null</value> if the key was not found.
            </returns>
        </member>
        <member name="M:ServiceStack.Caching.ICacheClientAsync.IncrementAsync(System.String,System.UInt32,System.Threading.CancellationToken)">
            <summary>
            Increments the value of the specified key by the given amount. 
            The operation is atomic and happens on the server.
            A non existent value at key starts at 0
            </summary>
            <param name="key">The identifier for the item to increment.</param>
            <param name="amount">The amount by which the client wants to increase the item.</param>
            <returns>
            The new value of the item or -1 if not found.
            </returns>
            <remarks>The item must be inserted into the cache before it can be changed. The item must be inserted as a <see cref="T:System.String"/>. The operation only works with <see cref="T:System.UInt32"/> values, so -1 always indicates that the item was not found.</remarks>
        </member>
        <member name="M:ServiceStack.Caching.ICacheClientAsync.DecrementAsync(System.String,System.UInt32,System.Threading.CancellationToken)">
            <summary>
            Increments the value of the specified key by the given amount. 
            The operation is atomic and happens on the server.
            A non existent value at key starts at 0
            </summary>
            <param name="key">The identifier for the item to increment.</param>
            <param name="amount">The amount by which the client wants to decrease the item.</param>
            <returns>
            The new value of the item or -1 if not found.
            </returns>
            <remarks>The item must be inserted into the cache before it can be changed. The item must be inserted as a <see cref="T:System.String"/>. The operation only works with <see cref="T:System.UInt32"/> values, so -1 always indicates that the item was not found.</remarks>
        </member>
        <member name="M:ServiceStack.Caching.ICacheClientAsync.AddAsync``1(System.String,``0,System.Threading.CancellationToken)">
            <summary>
            Adds a new item into the cache at the specified cache key only if the cache is empty.
            </summary>
            <param name="key">The key used to reference the item.</param>
            <param name="value">The object to be inserted into the cache.</param>
            <returns>
            true if the item was successfully stored in the cache; false otherwise.
            </returns>
            <remarks>The item does not expire unless it is removed due memory pressure.</remarks>
        </member>
        <member name="M:ServiceStack.Caching.ICacheClientAsync.SetAsync``1(System.String,``0,System.Threading.CancellationToken)">
            <summary>
            Sets an item into the cache at the cache key specified regardless if it already exists or not.
            </summary>
        </member>
        <member name="M:ServiceStack.Caching.ICacheClientAsync.ReplaceAsync``1(System.String,``0,System.Threading.CancellationToken)">
            <summary>
            Replaces the item at the cachekey specified only if an items exists at the location already. 
            </summary>
        </member>
        <member name="M:ServiceStack.Caching.ICacheClientAsync.FlushAllAsync(System.Threading.CancellationToken)">
            <summary>
            Invalidates all data on the cache.
            </summary>
        </member>
        <member name="M:ServiceStack.Caching.ICacheClientAsync.GetAllAsync``1(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Retrieves multiple items from the cache. 
            The default value of T is set for all keys that do not exist.
            </summary>
            <param name="keys">The list of identifiers for the items to retrieve.</param>
            <param name="token"></param>
            <returns>
            a Dictionary holding all items indexed by their key.
            </returns>
        </member>
        <member name="M:ServiceStack.Caching.ICacheClientAsync.SetAllAsync``1(System.Collections.Generic.IDictionary{System.String,``0},System.Threading.CancellationToken)">
            <summary>
            Sets multiple items to the cache. 
            </summary>
        </member>
        <member name="T:ServiceStack.Caching.ICacheClientExtended">
            <summary>
            Extend ICacheClient API with shared, non-core features
            </summary>
        </member>
        <member name="T:ServiceStack.Caching.IMemcachedClient">
            <summary>
            A light interface over a cache client.
            This interface was inspired by Enyim.Caching.MemcachedClient
            
            Only the methods that are intended to be used are required, if you require
            extra functionality you can uncomment the unused methods below as they have been
            implemented in DdnMemcachedClient
            </summary>
        </member>
        <member name="M:ServiceStack.Caching.IMemcachedClient.Remove(System.String)">
            <summary>
            Removes the specified item from the cache.
            </summary>
            <param name="key">The identifier for the item to delete.</param>
            <returns>
            true if the item was successfully removed from the cache; false otherwise.
            </returns>
        </member>
        <member name="M:ServiceStack.Caching.IMemcachedClient.RemoveAll(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Removes the cache for all the keys provided.
            </summary>
            <param name="keys">The keys.</param>
        </member>
        <member name="M:ServiceStack.Caching.IMemcachedClient.Get(System.String)">
            <summary>
            Retrieves the specified item from the cache.
            </summary>
            <param ICTname="key">The identifier for the item to retrieve.</param>
            <returns>
            The retrieved item, or <value>null</value> if the key was not found.
            </returns>
        </member>
        <member name="M:ServiceStack.Caching.IMemcachedClient.Increment(System.String,System.UInt32)">
            <summary>
            Increments the value of the specified key by the given amount. The operation is atomic and happens on the server.
            </summary>
            <param name="key">The identifier for the item to increment.</param>
            <param name="amount">The amount by which the client wants to increase the item.</param>
            <returns>
            The new value of the item or -1 if not found.
            </returns>
            <remarks>The item must be inserted into the cache before it can be changed. The item must be inserted as a <see cref="T:System.String"/>. The operation only works with <see cref="T:System.UInt32"/> values, so -1 always indicates that the item was not found.</remarks>
        </member>
        <member name="M:ServiceStack.Caching.IMemcachedClient.Decrement(System.String,System.UInt32)">
            <summary>
            Increments the value of the specified key by the given amount. The operation is atomic and happens on the server.
            </summary>
            <param name="key">The identifier for the item to increment.</param>
            <param name="amount">The amount by which the client wants to decrease the item.</param>
            <returns>
            The new value of the item or -1 if not found.
            </returns>
            <remarks>The item must be inserted into the cache before it can be changed. The item must be inserted as a <see cref="T:System.String"/>. The operation only works with <see cref="T:System.UInt32"/> values, so -1 always indicates that the item was not found.</remarks>
        </member>
        <member name="M:ServiceStack.Caching.IMemcachedClient.Add(System.String,System.Object)">
            <summary>
            Inserts an item into the cache with a cache key to reference its location.
            </summary>
            <param name="key">The key used to reference the item.</param>
            <param name="value">The object to be inserted into the cache.</param>
            <returns>
            true if the item was successfully stored in the cache; false otherwise.
            </returns>
            <remarks>The item does not expire unless it is removed due memory pressure.</remarks>
        </member>
        <member name="M:ServiceStack.Caching.IMemcachedClient.Add(System.String,System.Object,System.DateTime)">
            <summary>
            Inserts an item into the cache with a cache key to reference its location.
            </summary>
            <param name="key">The key used to reference the item.</param>
            <param name="value">The object to be inserted into the cache.</param>
            <param name="expiresAt">The time when the item is invalidated in the cache.</param>
            <returns>true if the item was successfully stored in the cache; false otherwise.</returns>
        </member>
        <member name="M:ServiceStack.Caching.IMemcachedClient.FlushAll">
            <summary>
            Removes all data from the cache.
            </summary>
        </member>
        <member name="M:ServiceStack.Caching.IMemcachedClient.GetAll(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Retrieves multiple items from the cache.
            </summary>
            <param name="keys">The list of identifiers for the items to retrieve.</param>
            <returns>
            a Dictionary holding all items indexed by their key.
            </returns>
        </member>
        <member name="M:ServiceStack.Caching.IRemoveByPattern.RemoveByPattern(System.String)">
            <summary>
            Removes items from cache that have keys matching the specified wildcard pattern
            </summary>
            <param name="pattern">The wildcard, where "*" means any sequence of characters and "?" means any single character.</param>
        </member>
        <member name="M:ServiceStack.Caching.IRemoveByPattern.RemoveByRegex(System.String)">
            <summary>
            Removes items from the cache based on the specified regular expression pattern
            </summary>
            <param name="regex">Regular expression pattern to search cache keys</param>
        </member>
        <member name="M:ServiceStack.Caching.IRemoveByPatternAsync.RemoveByPatternAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Removes items from cache that have keys matching the specified wildcard pattern
            </summary>
            <param name="pattern">The wildcard, where "*" means any sequence of characters and "?" means any single character.</param>
        </member>
        <member name="M:ServiceStack.Caching.IRemoveByPatternAsync.RemoveByRegexAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Removes items from the cache based on the specified regular expression pattern
            </summary>
            <param name="regex">Regular expression pattern to search cache keys</param>
        </member>
        <member name="T:ServiceStack.Caching.ISession">
            <summary>
            A Users Session
            </summary>
        </member>
        <member name="P:ServiceStack.Caching.ISession.Item(System.String)">
            <summary>
            Store any object at key
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Caching.ISession.Set``1(System.String,``0)">
            <summary>
            Set a typed value at key
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:ServiceStack.Caching.ISession.Get``1(System.String)">
            <summary>
            Get a typed value at key
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Caching.ISession.Remove(System.String)">
            <summary>
            Remove the value at key
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Caching.ISession.RemoveAll">
            <summary>
            Delete all Cache Entries (requires ICacheClient that implements IRemoveByPattern)
            </summary>
        </member>
        <member name="T:ServiceStack.Caching.ISessionAsync">
            <summary>
            A Users Session
            </summary>
        </member>
        <member name="M:ServiceStack.Caching.ISessionAsync.SetAsync``1(System.String,``0,System.Threading.CancellationToken)">
            <summary>
            Set a typed value at key
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:ServiceStack.Caching.ISessionAsync.GetAsync``1(System.String,System.Threading.CancellationToken)">
            <summary>
            Get a typed value at key
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Caching.ISessionAsync.RemoveAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Remove the value at key
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Caching.ISessionAsync.RemoveAllAsync(System.Threading.CancellationToken)">
            <summary>
            Delete all Cache Entries (requires ICacheClient that implements IRemoveByPattern)
            </summary>
        </member>
        <member name="T:ServiceStack.Caching.ISessionFactory">
            <summary>
            Retrieves a User Session
            </summary>
        </member>
        <member name="M:ServiceStack.Caching.ISessionFactory.GetOrCreateSession(ServiceStack.Web.IRequest,ServiceStack.Web.IResponse)">
            <summary>
            Gets the Session Bag for this request, creates one if it doesn't exist.
            </summary>
            <param name="httpReq"></param>
            <param name="httpRes"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Caching.ISessionFactory.GetOrCreateSession">
            <summary>
            Gets the Session Bag for this request, creates one if it doesn't exist.
            Only for ASP.NET apps. Uses the HttpContext.Current singleton.
            </summary>
        </member>
        <member name="M:ServiceStack.Caching.ISessionFactory.CreateSession(System.String)">
            <summary>
            Create a Session Bag using a custom sessionId
            </summary>
            <param name="sessionId"></param>
            <returns></returns>
        </member>
        <member name="T:ServiceStack.Caching.IStreamCompressor">
            <summary>
            Implement Stream Compressor, e.g. br, deflate, gzip
            </summary>
        </member>
        <member name="T:ServiceStack.Configuration.IContainerAdapter">
            <summary>
            Allow delegation of dependencies to other IOC's
            </summary>
        </member>
        <member name="M:ServiceStack.Configuration.IContainerAdapter.Resolve``1">
            <summary>
            Resolve Constructor Dependency
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Configuration.IResolver.TryResolve``1">
            <summary>
            Resolve a dependency from the AppHost's IOC
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:ServiceStack.Data.IEntityStore`1">
            <summary>
            For providers that want a cleaner API with a little more perf
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:ServiceStack.Data.IEntityStoreAsync`1">
            <summary>
            For providers that want a cleaner API with a little more perf
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:ServiceStack.DataAnnotations.AddColumnAttribute">
            <summary>
            Add Column during Db.Migrate, optional as adding columns are implied
            </summary>
        </member>
        <member name="T:ServiceStack.DataAnnotations.RemoveColumnAttribute">
            <summary>
            Remove Column during Db.Migrate
            </summary>
        </member>
        <member name="T:ServiceStack.DataAnnotations.RenameColumnAttribute">
            <summary>
            Remove Column during Db.Migrate
            </summary>
        </member>
        <member name="T:ServiceStack.DataAnnotations.AliasAttribute">
            <summary>
            Map C# Type Name to a different RDBMS Table name or a Property Name to a different RDBMS Column name
            </summary>
        </member>
        <member name="T:ServiceStack.DataAnnotations.AutoIdAttribute">
            <summary>
            Auto populate Property with RDBMS generated UUID if supported otherwise with a new C# GUID
            </summary>
        </member>
        <member name="T:ServiceStack.DataAnnotations.AutoIncrementAttribute">
            <summary>
            Auto populate Primary Key Property with an RDBMS generated Auto Incrementing serial Integer
            </summary>
        </member>
        <member name="T:ServiceStack.DataAnnotations.BelongToAttribute">
            <summary>
            Populate property from ambiguous column name in the specified joined table type
            </summary>
        </member>
        <member name="M:ServiceStack.DataAnnotations.BelongToAttribute.#ctor(System.Type)">
            <summary>
            Populate property from ambiguous column name in the specified joined table type
            </summary>
        </member>
        <member name="T:ServiceStack.DataAnnotations.CheckConstraintAttribute">
            <summary>
            Create an RDBMS Check Constraint on a Table column
            </summary>
        </member>
        <member name="M:ServiceStack.DataAnnotations.CheckConstraintAttribute.#ctor(System.String)">
            <summary>
            Create an RDBMS Check Constraint on a Table column
            </summary>
        </member>
        <member name="T:ServiceStack.DataAnnotations.CompositeIndexAttribute">
            <summary>
            Create an Composite RDBMS Index and optional Unique constraint
            </summary>
        </member>
        <member name="T:ServiceStack.DataAnnotations.ComputeAttribute">
            <summary>
            Compute attribute.
            Use to indicate that a property is a Calculated Field.
            Use [Persisted] attribute to persist column
            </summary>
        </member>
        <member name="T:ServiceStack.DataAnnotations.ComputedAttribute">
            <summary>
            Ignore calculated C# Property from being persisted in RDBMS Table
            </summary>
        </member>
        <member name="T:ServiceStack.DataAnnotations.PersistedAttribute">
            <summary>
            Whether to persist calculated column
            </summary>
        </member>
        <member name="T:ServiceStack.DataAnnotations.CustomFieldAttribute">
            <summary>
            Create RDBMS using Custom SQL Data Type
            </summary>
        </member>
        <member name="T:ServiceStack.DataAnnotations.CustomSelectAttribute">
            <summary>
            Populate property with Custom SELECT expression, e.g. [CustomSelect("Width * Height")]
            </summary>
        </member>
        <member name="M:ServiceStack.DataAnnotations.CustomSelectAttribute.#ctor(System.String)">
            <summary>
            Populate property with Custom SELECT expression, e.g. [CustomSelect("Width * Height")]
            </summary>
        </member>
        <member name="T:ServiceStack.DataAnnotations.CustomInsertAttribute">
            <summary>
            Populate INSERT parameter with Custom SQL expression, e.g. [CustomInsert("crypt({0}, gen_salt('bf'))")]
            </summary>
        </member>
        <member name="M:ServiceStack.DataAnnotations.CustomInsertAttribute.#ctor(System.String)">
            <summary>
            Populate INSERT parameter with Custom SQL expression, e.g. [CustomInsert("crypt({0}, gen_salt('bf'))")]
            </summary>
        </member>
        <member name="T:ServiceStack.DataAnnotations.CustomUpdateAttribute">
            <summary>
            Populate UPDATE parameter with Custom SQL expression, e.g. [CustomUpdate("crypt({0}, gen_salt('bf'))")]
            </summary>
        </member>
        <member name="M:ServiceStack.DataAnnotations.CustomUpdateAttribute.#ctor(System.String)">
            <summary>
            Populate UPDATE parameter with Custom SQL expression, e.g. [CustomUpdate("crypt({0}, gen_salt('bf'))")]
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:ServiceStack.DataAnnotations.DecimalLengthAttribute" -->
        <member name="T:ServiceStack.DataAnnotations.DefaultAttribute">
            <summary>
            Create RDBMS Column definition with specified default value
            </summary>
        </member>
        <member name="T:ServiceStack.DataAnnotations.DescriptionAttribute">
            <summary>
            Annotate any Type, Property or Enum with a textual description
            </summary>
        </member>
        <member name="M:ServiceStack.DataAnnotations.DescriptionAttribute.#ctor(System.String)">
            <summary>
            Annotate any Type, Property or Enum with a textual description
            </summary>
        </member>
        <member name="T:ServiceStack.DataAnnotations.EnumAsCharAttribute">
            <summary>
            Save Enum value as single char in RDBMS column
            </summary>
        </member>
        <member name="T:ServiceStack.DataAnnotations.EnumAsIntAttribute">
            <summary>
            Save Enum integer value in RDBMS column
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:ServiceStack.DataAnnotations.ExcludeAttribute" -->
        <!-- Badly formed XML comment ignored for member "M:ServiceStack.DataAnnotations.ExcludeAttribute.#ctor(ServiceStack.Feature)" -->
        <member name="T:ServiceStack.DataAnnotations.ExcludeMetadataAttribute">
            <summary>
            Exclude API from all Metadata Services
            </summary>
        </member>
        <member name="M:ServiceStack.DataAnnotations.ExcludeMetadataAttribute.#ctor">
            <summary>
            Exclude API from all Metadata Services
            </summary>
        </member>
        <member name="T:ServiceStack.DataAnnotations.ExcludeFromDescriptionAttribute">
            <summary>
            Exclude Description from being generated for API Endpoint, e.g. hiding it from OpenAPI
            </summary>
        </member>
        <member name="M:ServiceStack.DataAnnotations.ExcludeFromDescriptionAttribute.#ctor">
            <summary>
            Exclude Description from being generated for API Endpoint, e.g. hiding it from OpenAPI
            </summary>
        </member>
        <member name="T:ServiceStack.DataAnnotations.ExplicitAutoQuery">
            <summary>
            Exclude Auto Registering Explicit API in AutoQuery
            </summary>
        </member>
        <member name="M:ServiceStack.DataAnnotations.ExplicitAutoQuery.#ctor">
            <summary>
            Exclude Auto Registering Explicit API in AutoQuery
            </summary>
        </member>
        <member name="T:ServiceStack.DataAnnotations.ForeignKeyAttribute">
            <summary>
            Define an RDBMS Foreign Key Relationship
            </summary>
        </member>
        <member name="M:ServiceStack.DataAnnotations.ForeignKeyAttribute.#ctor(System.Type)">
            <summary>
            Define an RDBMS Foreign Key Relationship
            </summary>
        </member>
        <member name="P:ServiceStack.DataAnnotations.ForeignKeyAttribute.ForeignKeyName">
            <summary>
            Explicit foreign key name. If it's null, or empty, the FK name will be autogenerated as before.
            </summary>
        </member>
        <member name="T:ServiceStack.DataAnnotations.HashKeyAttribute">
            <summary>
            Hash Key Attribute used to specify which property is the HashKey, e.g. in DynamoDb.
            </summary>
        </member>
        <member name="T:ServiceStack.DataAnnotations.IdAttribute">
            <summary>
            Uniquely identify C# Types and properties with a unique integer in gRPC Services
            </summary>
        </member>
        <member name="T:ServiceStack.DataAnnotations.IgnoreAttribute">
            <summary>
            Ignore property from consideration as an RDBMS column.
            Properties with this attribute are ignored in all SQL.
            </summary>
        </member>
        <member name="T:ServiceStack.DataAnnotations.IgnoreOnSelectAttribute">
            <summary>
            Ignore this property in SELECT statements
            </summary>
        </member>
        <member name="T:ServiceStack.DataAnnotations.IgnoreOnUpdateAttribute">
            <summary>
            Ignore this property in UPDATE statements
            </summary>
        </member>
        <member name="T:ServiceStack.DataAnnotations.IgnoreOnInsertAttribute">
            <summary>
            Ignore this property in INSERT statements
            </summary>
        </member>
        <member name="T:ServiceStack.DataAnnotations.IndexAttribute">
            <summary>
            Create an RDBMS Column Index
            </summary>
        </member>
        <member name="T:ServiceStack.DataAnnotations.MetaAttribute">
            <summary>
            Decorate any type or property with custom metadata
            </summary>
        </member>
        <member name="M:ServiceStack.DataAnnotations.MetaAttribute.#ctor(System.String,System.String)">
            <summary>
            Decorate any type or property with custom metadata
            </summary>
        </member>
        <member name="T:ServiceStack.DataAnnotations.PostCreateTableAttribute">
            <summary>
            Run Custom SQL immediately after RDBMS table is created
            </summary>
        </member>
        <member name="M:ServiceStack.DataAnnotations.PostCreateTableAttribute.#ctor(System.String)">
            <summary>
            Run Custom SQL immediately after RDBMS table is created
            </summary>
        </member>
        <member name="T:ServiceStack.DataAnnotations.PostDropTableAttribute">
            <summary>
            Run Custom SQL immediately after RDBMS table is dropped
            </summary>
        </member>
        <member name="M:ServiceStack.DataAnnotations.PostDropTableAttribute.#ctor(System.String)">
            <summary>
            Run Custom SQL immediately after RDBMS table is dropped
            </summary>
        </member>
        <member name="T:ServiceStack.DataAnnotations.PreCreateTableAttribute">
            <summary>
            Run Custom SQL immediately before RDBMS table is created
            </summary>
        </member>
        <member name="M:ServiceStack.DataAnnotations.PreCreateTableAttribute.#ctor(System.String)">
            <summary>
            Run Custom SQL immediately before RDBMS table is created
            </summary>
        </member>
        <member name="T:ServiceStack.DataAnnotations.PreDropTableAttribute">
            <summary>
            Run Custom SQL immediately before RDBMS table is dropped
            </summary>
        </member>
        <member name="M:ServiceStack.DataAnnotations.PreDropTableAttribute.#ctor(System.String)">
            <summary>
            Run Custom SQL immediately before RDBMS table is dropped
            </summary>
        </member>
        <member name="T:ServiceStack.DataAnnotations.PrimaryKeyAttribute">
            <summary>
            Treat this property is the Primary Key of the table
            </summary>
        </member>
        <member name="T:ServiceStack.DataAnnotations.RangeAttribute">
            <summary>
            Document the allowable min and max range for this property
            </summary>
        </member>
        <member name="T:ServiceStack.DataAnnotations.RangeKeyAttribute">
            <summary>
            Range Key Attribute used to specify which property is the RangeKey, e.g. in DynamoDb.
            </summary>
        </member>
        <member name="T:ServiceStack.DataAnnotations.ReferenceAttribute">
            <summary>
            Define this property as containing a POCO Complex Type Reference
            </summary>
        </member>
        <member name="P:ServiceStack.DataAnnotations.ReferenceAttribute.SelfId">
            <summary>
            Use the specified Field on this POCO as the FK field for the referenced POCO Complex Type
            </summary>
        </member>
        <member name="P:ServiceStack.DataAnnotations.ReferenceAttribute.RefId">
            <summary>
            Specify the FK field to match of the referenced POCO Complex Type (default Primary Key)
            </summary>
        </member>
        <member name="P:ServiceStack.DataAnnotations.ReferenceAttribute.RefLabel">
            <summary>
            If configured will display the Reference Field instead of the default rendered complex type 
            </summary>
        </member>
        <member name="T:ServiceStack.DataAnnotations.ReferenceFieldAttribute">
            <summary>
            Populate with a field from a foreign table in AutoQuery and Load* APIs
            </summary>
        </member>
        <member name="P:ServiceStack.DataAnnotations.ReferenceFieldAttribute.Model">
            <summary>
            Foreign Key Table name
            </summary>
        </member>
        <member name="P:ServiceStack.DataAnnotations.ReferenceFieldAttribute.Id">
            <summary>
            The Field name on current Model to use for the Foreign Key Table Lookup 
            </summary>
        </member>
        <member name="P:ServiceStack.DataAnnotations.ReferenceFieldAttribute.Field">
            <summary>
            Specify Field to reference (if different from property name)
            </summary>
        </member>
        <member name="T:ServiceStack.DataAnnotations.ReferencesAttribute">
            <summary>
            Document a reference to an external Type, used to create simple Foreign Key references
            </summary>
        </member>
        <member name="M:ServiceStack.DataAnnotations.ReferencesAttribute.#ctor(System.Type)">
            <summary>
            Document a reference to an external Type, used to create simple Foreign Key references
            </summary>
        </member>
        <member name="T:ServiceStack.DataAnnotations.RequiredAttribute">
            <summary>
            Create NOT NULL Column Definitions in RDBMS Create Table statements
            Use [ValidateNotNull] to use https://docs.servicestack.net/validation to enforce a not null property 
            </summary>
        </member>
        <member name="T:ServiceStack.DataAnnotations.ReturnOnInsertAttribute">
            <summary>
            Indicate the property should be included in the returning/output clause of INSERT SQL Statements
            </summary>
        </member>
        <member name="T:ServiceStack.DataAnnotations.RowVersionAttribute">
            <summary>
            Treat property as an automatically incremented RDBMS Row Version 
            </summary>
        </member>
        <member name="T:ServiceStack.DataAnnotations.SchemaAttribute">
            <summary>
            Define which RDBMS Schema Data Model belongs to
            </summary>
        </member>
        <member name="T:ServiceStack.DataAnnotations.SequenceAttribute">
            <summary>
            Use in FirebirdSql. indicates name of generator for columns of type AutoIncrement
            </summary>
        </member>
        <member name="M:ServiceStack.DataAnnotations.SequenceAttribute.#ctor(System.String)">
            <summary>
            Use in FirebirdSql. indicates name of generator for columns of type AutoIncrement
            </summary>
        </member>
        <member name="T:ServiceStack.DataAnnotations.StringLengthAttribute">
            <summary>
            Define the RDBMS Column Definition variable character length
            </summary>
        </member>
        <member name="T:ServiceStack.DataAnnotations.UniqueAttribute">
            <summary>
            Define a unique RDBMS column constraint
            </summary>
        </member>
        <member name="T:ServiceStack.DataAnnotations.UniqueConstraintAttribute">
            <summary>
            Define a unique multi column RDBMS column constraint
            </summary>
        </member>
        <member name="T:ServiceStack.EmptyResponse">
            <summary>
            void methods that still need to return error information can return an EmptyResponse
            </summary>
        </member>
        <member name="T:ServiceStack.ErrorResponse">
            <summary>
            Generic ResponseStatus for when Response Type can't be inferred.
            In schema-less formats like JSON, JSV it has the same shape as a typed Response DTO
            </summary>
        </member>
        <member name="T:ServiceStack.FormatAttribute">
            <summary>
            Format Results to use custom formatting function. 
            Can use any available JS function, see <see cref="T:ServiceStack.FormatMethods"/> for built-in format functions
            </summary>
        </member>
        <member name="P:ServiceStack.FormatAttribute.Method">
            <summary>
            Name of available JS function, see <see cref="T:ServiceStack.FormatMethods"/> for built-in functions
            </summary>
        </member>
        <member name="T:ServiceStack.FormatEnumFlags">
            <summary>
            Format Enum Flags into expanded enum strings 
            </summary>
        </member>
        <member name="T:ServiceStack.FormatMethods">
            <summary>
            JS Functions available in UIs 
            </summary>
        </member>
        <member name="F:ServiceStack.FormatMethods.Currency">
            <summary>
            USD Currency
            </summary>
        </member>
        <member name="F:ServiceStack.FormatMethods.Bytes">
            <summary>
            Human Readable File Size
            </summary>
        </member>
        <member name="F:ServiceStack.FormatMethods.Icon">
            <summary>
            Render Image URL as an img icon
            </summary>
        </member>
        <member name="F:ServiceStack.FormatMethods.IconRounded">
            <summary>
            Render Image URL as an img icon
            </summary>
        </member>
        <member name="F:ServiceStack.FormatMethods.Attachment">
            <summary>
            Register download link containing file name and file extension icon  
            </summary>
        </member>
        <member name="F:ServiceStack.FormatMethods.Link">
            <summary>
            Linkify URLs
            options: added as attributes to &lt;a&gt; element, use 'cls' or 'className' for class attribute.
            </summary>
        </member>
        <member name="F:ServiceStack.FormatMethods.LinkEmail">
            <summary>
            Linkify Emails with mailto:
            options: {subject:'Subject',body:'Email Body'} all other options added as HTML attributes
            </summary>
        </member>
        <member name="F:ServiceStack.FormatMethods.LinkPhone">
            <summary>
            Linkify Phone number with tel:
            options: added as attributes to &lt;a&gt; element, use 'cls' or 'className' for class attribute.
            </summary>
        </member>
        <member name="F:ServiceStack.FormatMethods.EnumFlags">
            <summary>
            Format Enum Flags into expanded enum strings 
            </summary>
        </member>
        <member name="F:ServiceStack.FormatMethods.Hidden">
            <summary>
            Hides field from being displayed in search results
            </summary>
        </member>
        <member name="F:ServiceStack.Lifetime.Singleton">
            <summary>
            Specifies that a single instance of the service will be created.
            </summary>
        </member>
        <member name="F:ServiceStack.Lifetime.Scoped">
            <summary>
            Specifies that a new instance of the service will be created for each scope.
            </summary>
            <remarks>
            In ASP.NET Core applications a scope is created around each server request.
            </remarks>
        </member>
        <member name="F:ServiceStack.Lifetime.Transient">
            <summary>
            Specifies that a new instance of the service will be created every time it is requested.
            </summary>
        </member>
        <member name="F:ServiceStack.RetryBehavior.Default">
            <summary>
            Use the default retry behavior.
            </summary>
        </member>
        <member name="F:ServiceStack.RetryBehavior.Standard">
            <summary>
            Always retry the operation after the same delay.
            </summary>
        </member>
        <member name="F:ServiceStack.RetryBehavior.LinearBackoff">
            <summary>
            Specifies that the operation should be retried with a linear backoff delay strategy.
            </summary>
        </member>
        <member name="F:ServiceStack.RetryBehavior.ExponentialBackoff">
            <summary>
            Specifies that the operation should be retried with an exponential backoff strategy.
            </summary>
        </member>
        <member name="F:ServiceStack.RetryBehavior.FullJitterBackoff">
            <summary>
            Specifies that the operation should be retried with a full jittered exponential backoff strategy.
            </summary>
        </member>
        <member name="T:ServiceStack.RetryAttribute">
            <summary>
            Specifies that the operation should be retried if it fails.
            </summary>
        </member>
        <member name="P:ServiceStack.RetryAttribute.Times">
            <summary>
            How many times to retry the operation.
            </summary>
        </member>
        <member name="P:ServiceStack.RetryAttribute.Behavior">
            <summary>
            The retry behavior to use.
            </summary>
        </member>
        <member name="P:ServiceStack.RetryAttribute.DelayMs">
            <summary>
            The initial delay in milliseconds.
            </summary>
        </member>
        <member name="P:ServiceStack.RetryAttribute.MaxDelayMs">
            <summary>
            The maximum delay in milliseconds.
            </summary>
        </member>
        <member name="P:ServiceStack.RetryAttribute.DelayFirst">
            <summary>
            Whether to delay the first retry.
            </summary>
        </member>
        <member name="T:ServiceStack.RetryPolicy">
            <summary>
            The Retry policy to use for the operation 
            </summary>
            <param name="Times">How many times to retry the operation</param>
            <param name="Behavior">The retry behavior to use</param>
            <param name="DelayMs">The initial delay in milliseconds</param>
            <param name="MaxDelayMs">The maximum delay in milliseconds</param>
            <param name="DelayFirst">Whether to delay the first retry</param>
        </member>
        <member name="M:ServiceStack.RetryPolicy.#ctor(System.Int32,ServiceStack.RetryBehavior,System.Int32,System.Int32,System.Boolean)">
            <summary>
            The Retry policy to use for the operation 
            </summary>
            <param name="Times">How many times to retry the operation</param>
            <param name="Behavior">The retry behavior to use</param>
            <param name="DelayMs">The initial delay in milliseconds</param>
            <param name="MaxDelayMs">The maximum delay in milliseconds</param>
            <param name="DelayFirst">Whether to delay the first retry</param>
        </member>
        <member name="P:ServiceStack.RetryPolicy.Times">
            <summary>How many times to retry the operation</summary>
        </member>
        <member name="P:ServiceStack.RetryPolicy.Behavior">
            <summary>The retry behavior to use</summary>
        </member>
        <member name="P:ServiceStack.RetryPolicy.DelayMs">
            <summary>The initial delay in milliseconds</summary>
        </member>
        <member name="P:ServiceStack.RetryPolicy.MaxDelayMs">
            <summary>The maximum delay in milliseconds</summary>
        </member>
        <member name="P:ServiceStack.RetryPolicy.DelayFirst">
            <summary>Whether to delay the first retry</summary>
        </member>
        <member name="T:ServiceStack.IgnoreServicesAttribute">
            <summary>
            Ignore Auto Registering this Service in the IOC
            </summary>
        </member>
        <member name="T:ServiceStack.IHasErrorStatus">
            <summary>
            Used in ApiResult
            </summary>
        </member>
        <member name="T:ServiceStack.IHasResponseStatus">
            <summary>
            Contract indication that the Response DTO has a ResponseStatus
            </summary>
        </member>
        <member name="T:ServiceStack.InfoException">
            <summary>
            When only Exception message is important and StackTrace is irrelevant
            </summary>
        </member>
        <member name="T:ServiceStack.InputAttribute">
            <summary>
            Customize the HTML Input control in Auto Form UIs
            </summary>
        </member>
        <member name="T:ServiceStack.FieldAttribute">
            <summary>
            Customize a Form Field and HTML Input for a Type's Property
            </summary>
        </member>
        <member name="T:ServiceStack.IntlNumber">
            <summary>
            Configure result field to use JavaScript's Intl.NumberFormat formatter 
            </summary>
        </member>
        <member name="T:ServiceStack.IntlDateTime">
            <summary>
            Configure result field to use JavaScript's Intl.DateTimeFormat formatter 
            </summary>
        </member>
        <member name="T:ServiceStack.IntlRelativeTime">
            <summary>
            Configure result field to use JavaScript's Intl.RelativeTimeFormat formatter 
            </summary>
        </member>
        <member name="T:ServiceStack.Intl">
            <summary>
            Configure result field to use a JavaScript Intl formatter 
            </summary>
        </member>
        <member name="P:ServiceStack.Intl.Currency">
            <summary>
            Use <see cref="T:ServiceStack.NumberCurrency"/> for typed values
            </summary>
        </member>
        <member name="P:ServiceStack.Intl.Unit">
            <summary>
            Use <see cref="T:ServiceStack.NumberUnit"/> for typed values
            </summary>
        </member>
        <member name="F:ServiceStack.IntlFormat.Number">
            <summary>
            Intl.NumberFormat
            </summary>
        </member>
        <member name="F:ServiceStack.IntlFormat.DateTime">
            <summary>
            Intl.DateTimeFormat
            </summary>
        </member>
        <member name="F:ServiceStack.IntlFormat.RelativeTime">
            <summary>
            Intl.RelativeTimeFormat
            </summary>
        </member>
        <member name="P:ServiceStack.IO.IVirtualFile.Extension">
            <summary>
            The file extension without '.' prefix
            </summary>
        </member>
        <member name="M:ServiceStack.IO.IVirtualFile.GetContents">
            <summary>
            Returns ReadOnlyMemory&lt;byte&gt; for binary files or
            ReadOnlyMemory&lt;char&gt; for text files   
            </summary>
        </member>
        <member name="M:ServiceStack.IO.IVirtualFile.Refresh">
            <summary>
            Refresh file stats for this node if supported
            </summary>
        </member>
        <member name="M:ServiceStack.IO.IVirtualFiles.WriteFile(System.String,System.Object)">
            <summary>
            Contents can be either:
            string, ReadOnlyMemory&lt;char&gt;, byte[], `ReadOnlyMemory&lt;byte&gt;, Stream or IVirtualFile 
            </summary>
        </member>
        <member name="M:ServiceStack.IO.IVirtualFiles.AppendFile(System.String,System.Object)">
            <summary>
            Contents can be either:
            string, ReadOnlyMemory&lt;char&gt;, byte[], `ReadOnlyMemory&lt;byte&gt;, Stream or IVirtualFile 
            </summary>
        </member>
        <member name="P:ServiceStack.IQuery.Skip">
            <summary>
            How many results to skip
            </summary>
        </member>
        <member name="P:ServiceStack.IQuery.Take">
            <summary>
            How many results to return
            </summary>
        </member>
        <member name="P:ServiceStack.IQuery.OrderBy">
            <summary>
            List of fields to sort by, can order by multiple fields and inverse order, e.g: Id,-Amount
            </summary>
        </member>
        <member name="P:ServiceStack.IQuery.OrderByDesc">
            <summary>
            List of fields to sort by descending, can order by multiple fields and inverse order, e.g: -Id,Amount
            </summary>
        </member>
        <member name="P:ServiceStack.IQuery.Include">
            <summary>
            Include aggregate data like Total, COUNT(*), COUNT(DISTINCT Field), Sum(Amount), etc
            </summary>
        </member>
        <member name="P:ServiceStack.IQuery.Fields">
            <summary>
            The fields to return
            </summary>
        </member>
        <member name="T:ServiceStack.QueryTerm">
            <summary>
            How the filter should be applied to the query
            </summary>
        </member>
        <member name="F:ServiceStack.QueryTerm.Default">
            <summary>
            Defaults to 'And'
            </summary>
        </member>
        <member name="F:ServiceStack.QueryTerm.And">
            <summary>
            Apply filter to query using 'AND' to further filter resultset
            </summary>
        </member>
        <member name="F:ServiceStack.QueryTerm.Or">
            <summary>
            Apply inclusive filter to query using 'OR' to further expand resultset
            </summary>
        </member>
        <member name="F:ServiceStack.QueryTerm.Ensure">
            <summary>
            Ensure filter is always applied even if other 'OR' filters are included (uses OrmLite's Ensure API)
            </summary>
        </member>
        <member name="T:ServiceStack.ValueStyle">
            <summary>
            Type of Value used in the SQL Template
            </summary>
        </member>
        <member name="F:ServiceStack.ValueStyle.Single">
            <summary>
            Standard SQL Condition, e.g: '{Field} = {Value}'
            </summary>
        </member>
        <member name="F:ServiceStack.ValueStyle.Multiple">
            <summary>
            SQL Template uses {ValueN} e.g. '{Field} BETWEEN {Value1} AND {Value2}'
            </summary>
        </member>
        <member name="F:ServiceStack.ValueStyle.List">
            <summary>
            SQL Template uses collection parameter, e.g: '{Field} IN ({Values})'
            </summary>
        </member>
        <member name="T:ServiceStack.QueryDbAttribute">
            <summary>
            Change the default querying behaviour of filter properties in AutoQuery APIs
            </summary>
        </member>
        <member name="T:ServiceStack.QueryDataAttribute">
            <summary>
            Change the default querying behaviour of filter properties in AutoQuery Data APIs
            </summary>
        </member>
        <member name="T:ServiceStack.QueryDbFieldAttribute">
            <summary>
            Define to use a custom AutoQuery filter
            </summary>
        </member>
        <member name="P:ServiceStack.QueryDbFieldAttribute.Term">
            <summary>
            Should this filter be applied with 'AND' or 'OR' or always filtered with 'Ensure' 
            </summary>
        </member>
        <member name="P:ServiceStack.QueryDbFieldAttribute.Operand">
            <summary>
            For Simple Filters to change Operand used in default Template, e.g. For Greater Than: Operand=">"
            </summary>
        </member>
        <member name="P:ServiceStack.QueryDbFieldAttribute.Template">
            <summary>
            Use a Custom SQL Filter, Use <see cref="T:ServiceStack.SqlTemplate"/> for common templates, e.g: Template=SqlTemplate.IsNotNull
            </summary>
        </member>
        <member name="P:ServiceStack.QueryDbFieldAttribute.Field">
            <summary>
            The name of the DB Field to query
            </summary>
        </member>
        <member name="P:ServiceStack.QueryDbFieldAttribute.ValueFormat">
            <summary>
            Value modifier, e.g. implement StartsWith with 'Name LIKE {Value}', ValueFormat="{0}%"
            </summary>
        </member>
        <member name="P:ServiceStack.QueryDbFieldAttribute.ValueStyle">
            <summary>
            Type of Value used in the SQL Template
            </summary>
        </member>
        <member name="T:ServiceStack.AutoFilterAttribute">
            <summary>
            Apply additional pre-configured filters to AutoQuery APIs
            </summary>
        </member>
        <member name="P:ServiceStack.AutoFilterAttribute.Term">
            <summary>
            Should this filter be applied with 'AND' or 'OR' or always filtered with 'Ensure' 
            </summary>
        </member>
        <member name="P:ServiceStack.AutoFilterAttribute.Field">
            <summary>
            The name of the DB Field to query
            </summary>
        </member>
        <member name="P:ServiceStack.AutoFilterAttribute.Operand">
            <summary>
            For Simple Filters to change Operand used in default Template, e.g. For Greater Than: Operand=">"
            </summary>
        </member>
        <member name="P:ServiceStack.AutoFilterAttribute.Template">
            <summary>
            Use a Custom SQL Filter, Use <see cref="T:ServiceStack.SqlTemplate"/> for common templates, e.g: Template=SqlTemplate.IsNotNull
            </summary>
        </member>
        <member name="P:ServiceStack.AutoFilterAttribute.ValueFormat">
            <summary>
            Value modifier, e.g. implement StartsWith with 'Name LIKE {Value}', ValueFormat="{0}%"
            </summary>
        </member>
        <member name="T:ServiceStack.SqlTemplate">
            <summary>
            Common AutoQuery SQL Filter Templates
            </summary>
        </member>
        <member name="T:ServiceStack.QueryDataFieldAttribute">
            <summary>
            Define to use a custom AutoQuery Data filter
            </summary>
        </member>
        <member name="P:ServiceStack.QueryResponse`1.Total">
            <summary>
            Populate with Include=Total or if registered with: AutoQueryFeature { IncludeTotal = true }
            </summary>
        </member>
        <member name="T:ServiceStack.AutoUpdateAttribute">
            <summary>
            Change the update behavior to only update non-default values
            </summary>
        </member>
        <member name="T:ServiceStack.AutoDefaultAttribute">
            <summary>
            Specify to fallback default values when not provided
            </summary>
        </member>
        <member name="T:ServiceStack.AutoMapAttribute">
            <summary>
            Map System Input properties to Data Model fields
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:ServiceStack.AutoPopulateAttribute" -->
        <member name="P:ServiceStack.AutoPopulateAttribute.Field">
            <summary>
            Name of Class Property to Populate
            </summary>
        </member>
        <member name="T:ServiceStack.AutoIgnoreAttribute">
            <summary>
            Ignore mapping Request DTO property to Data Model
            </summary>
        </member>
        <member name="T:ServiceStack.Behavior">
            <summary>
            Available built-in operations for AutoQuery Crud Services, executed by
            AuditAutoCrudMetadataFilter in AutoQueryFeature.AutoCrudMetadataFilters
            </summary>
        </member>
        <member name="F:ServiceStack.Behavior.AuditQuery">
            <summary>
            Auto Filter SoftDeleted Results
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:ServiceStack.Behavior.AuditCreate" -->
        <!-- Badly formed XML comment ignored for member "F:ServiceStack.Behavior.AuditModify" -->
        <!-- Badly formed XML comment ignored for member "F:ServiceStack.Behavior.AuditDelete" -->
        <!-- Badly formed XML comment ignored for member "F:ServiceStack.Behavior.AuditSoftDelete" -->
        <member name="T:ServiceStack.AutoApplyAttribute">
            <summary>
            Apply generic behavior to AutoQuery Operations
            </summary>
        </member>
        <member name="P:ServiceStack.AutoApplyAttribute.Name">
            <summary>
            The name of the behavior you want to apply
            </summary>
        </member>
        <member name="P:ServiceStack.AutoApplyAttribute.Args">
            <summary>
            Any additional args to define the behavior
            </summary>
        </member>
        <member name="M:ServiceStack.IRequiresSchema.InitSchema">
            <summary>
            Unified API to create any missing Tables, Data Structure Schema 
            or perform any other tasks dependencies require to run at Startup.
            </summary>
        </member>
        <member name="M:ServiceStack.IRequiresSchemaAsync.InitSchemaAsync(System.Threading.CancellationToken)">
            <summary>
            Unified API to create any missing Tables, Data Structure Schema 
            or perform any other tasks dependencies require to run at Startup.
            </summary>
        </member>
        <member name="T:ServiceStack.ISequenceSource">
            <summary>
            Provide unique, incrementing sequences. Used in PocoDynamo.
            </summary>
        </member>
        <member name="T:ServiceStack.IService">
            <summary>
            Marker interfaces
            </summary>
        </member>
        <member name="T:ServiceStack.IAny`1">
            <summary>
            Marker interface to enforce recommended method signature on ServiceStack Services: object Any(T request)   
            </summary>
        </member>
        <member name="T:ServiceStack.IGet`1">
            <summary>
            Marker interface to enforce recommended method signature on ServiceStack Services: object Get(T request)   
            </summary>
        </member>
        <member name="T:ServiceStack.IPost`1">
            <summary>
            Marker interface to enforce recommended method signature on ServiceStack Services: object Post(T request)   
            </summary>
        </member>
        <member name="T:ServiceStack.IPut`1">
            <summary>
            Marker interface to enforce recommended method signature on ServiceStack Services: object Put(T request)   
            </summary>
        </member>
        <member name="T:ServiceStack.IDelete`1">
            <summary>
            Marker interface to enforce recommended method signature on ServiceStack Services: object Delete(T request)   
            </summary>
        </member>
        <member name="T:ServiceStack.IPatch`1">
            <summary>
            Marker interface to enforce recommended method signature on ServiceStack Services: object Patch(T request)   
            </summary>
        </member>
        <member name="T:ServiceStack.IOptionsVerb`1">
            <summary>
            Marker interface to enforce recommended method signature on ServiceStack Services: object Options(T request)   
            </summary>
        </member>
        <member name="T:ServiceStack.IServiceGateway">
            <summary>
            The minimal API Surface to capture the most common SYNC requests.
            Convenience extensions over these core API's available in ServiceGatewayExtensions
            </summary>
        </member>
        <member name="M:ServiceStack.IServiceGateway.Send``1(System.Object)">
            <summary>
            Normal Request/Reply Services
            </summary>
        </member>
        <member name="M:ServiceStack.IServiceGateway.SendAll``1(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Auto Batched Request/Reply Requests
            </summary>
        </member>
        <member name="M:ServiceStack.IServiceGateway.Publish(System.Object)">
            <summary>
            OneWay Service
            </summary>
        </member>
        <member name="M:ServiceStack.IServiceGateway.PublishAll(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Auto Batched OneWay Requests
            </summary>
        </member>
        <member name="T:ServiceStack.IServiceGatewayAsync">
            <summary>
            The minimal API Surface to capture the most common ASYNC requests.
            Convenience extensions over these core API's available in ServiceGatewayExtensions
            </summary>
        </member>
        <member name="M:ServiceStack.IServiceGatewayAsync.SendAsync``1(System.Object,System.Threading.CancellationToken)">
            <summary>
            Normal Request/Reply Services
            </summary>
        </member>
        <member name="M:ServiceStack.IServiceGatewayAsync.SendAllAsync``1(System.Collections.Generic.IEnumerable{System.Object},System.Threading.CancellationToken)">
            <summary>
            Auto Batched Request/Reply Requests
            </summary>
        </member>
        <member name="M:ServiceStack.IServiceGatewayAsync.PublishAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            OneWay Service
            </summary>
        </member>
        <member name="M:ServiceStack.IServiceGatewayAsync.PublishAllAsync(System.Collections.Generic.IEnumerable{System.Object},System.Threading.CancellationToken)">
            <summary>
            Auto Batched OneWay Requests
            </summary>
        </member>
        <member name="P:ServiceStack.Jobs.BackgroundJobBase.RefId">
            <summary>
            Unique user-specified or system generated GUID for Job
            </summary>
        </member>
        <member name="P:ServiceStack.Jobs.BackgroundJobBase.Worker">
            <summary>
            Named Worker Thread to execute Job on  
            </summary>
        </member>
        <member name="P:ServiceStack.Jobs.BackgroundJobBase.Tag">
            <summary>
            Associate Job with a tag group
            </summary>
        </member>
        <member name="P:ServiceStack.Jobs.BackgroundJobBase.Callback">
            <summary>
            Command to Execute after successful completion of Job
            </summary>
        </member>
        <member name="P:ServiceStack.Jobs.BackgroundJobBase.DependsOn">
            <summary>
            Only execute job after successful completion of Parent Job
            </summary>
        </member>
        <member name="P:ServiceStack.Jobs.BackgroundJobBase.RunAfter">
            <summary>
            Only run Job after date
            </summary>
        </member>
        <member name="P:ServiceStack.Jobs.BackgroundJobBase.RequestId">
            <summary>
            Batch Id for marking dispatched jobs
            </summary>
        </member>
        <member name="P:ServiceStack.Jobs.BackgroundJobBase.RequestType">
            <summary>
            API or CMD
            </summary>
        </member>
        <member name="P:ServiceStack.Jobs.BackgroundJobBase.Command">
            <summary>
            The Command to Execute
            </summary>
        </member>
        <member name="P:ServiceStack.Jobs.BackgroundJobBase.Request">
            <summary>
            The Request DTO or Command Argument
            </summary>
        </member>
        <member name="P:ServiceStack.Jobs.BackgroundJobBase.RequestBody">
            <summary>
            JSON Body of Request
            </summary>
        </member>
        <member name="P:ServiceStack.Jobs.BackgroundJobBase.UserId">
            <summary>
            The ASP .NET Identity Auth User Id to populate the IRequest Context ClaimsPrincipal and User Session
            </summary>
        </member>
        <member name="P:ServiceStack.Jobs.BackgroundJobBase.Response">
            <summary>
            The Response DTO Name
            </summary>
        </member>
        <member name="P:ServiceStack.Jobs.BackgroundJobBase.ResponseBody">
            <summary>
            The Response DTO JSON Body
            </summary>
        </member>
        <member name="P:ServiceStack.Jobs.BackgroundJobBase.State">
            <summary>
            The state the Job is in
            </summary>
        </member>
        <member name="P:ServiceStack.Jobs.BackgroundJobBase.StartedDate">
            <summary>
            The day the Job was started
            </summary>
        </member>
        <member name="P:ServiceStack.Jobs.BackgroundJobBase.CompletedDate">
            <summary>
            When the Job was completed
            </summary>
        </member>
        <member name="P:ServiceStack.Jobs.BackgroundJobBase.NotifiedDate">
            <summary>
            When the Job with Callback was notified
            </summary>
        </member>
        <member name="P:ServiceStack.Jobs.BackgroundJobBase.RetryLimit">
            <summary>
            How many times to attempt to retry Job on failure, default 2 (BackgroundsJobFeature.DefaultRetryLimit)
            </summary>
        </member>
        <member name="T:ServiceStack.Jobs.IBackgroundJobs">
            <summary>
            Provides methods for managing background jobs, including enqueueing, running, canceling,
            and monitoring jobs.
            </summary>
        </member>
        <member name="M:ServiceStack.Jobs.IBackgroundJobs.EnqueueApi(System.Object,ServiceStack.Jobs.BackgroundJobOptions)">
            <summary>
            Enqueues an API request as a background job.
            </summary>
        </member>
        <member name="M:ServiceStack.Jobs.IBackgroundJobs.EnqueueCommand(System.String,System.Object,ServiceStack.Jobs.BackgroundJobOptions)">
            <summary>
            Enqueues a command as a background job.
            </summary>
        </member>
        <member name="M:ServiceStack.Jobs.IBackgroundJobs.RunCommand(System.String,System.Object,ServiceStack.Jobs.BackgroundJobOptions)">
            <summary>
            Executes a transient (i.e. non-durable) command and returns immediately with a Reference
            to the Executing Job
            </summary>
        </member>
        <member name="M:ServiceStack.Jobs.IBackgroundJobs.RunCommandAsync(System.String,System.Object,ServiceStack.Jobs.BackgroundJobOptions)">
            <summary>
            Executes a transient (i.e. non-durable) command that waits until the command is executed
            and returns the command result if any
            </summary>
        </member>
        <member name="M:ServiceStack.Jobs.IBackgroundJobs.ExecuteJobAsync(ServiceStack.Jobs.BackgroundJob)">
            <summary>
            Used by Background Workers to execute a Job 
            </summary>
        </member>
        <member name="M:ServiceStack.Jobs.IBackgroundJobs.CancelJob(System.Int64)">
            <summary>
            Cancels a running job by its Id, returns true if a running job was cancelled
            </summary>
        </member>
        <member name="M:ServiceStack.Jobs.IBackgroundJobs.CancelJobs(System.Nullable{ServiceStack.Jobs.BackgroundJobState},System.String)">
            <summary>
            Cancel all Jobs with the specified state or the specified worker
            </summary>
            <returns>How many jobs were cancelled</returns>
        </member>
        <member name="M:ServiceStack.Jobs.IBackgroundJobs.CancelWorker(System.String)">
            <summary>
            Cancels a named Background Worker and transfers any pending queues to a new worker
            </summary>
        </member>
        <member name="M:ServiceStack.Jobs.IBackgroundJobs.RequeueFailedJob(System.Int64)">
            <summary>
            Requeues a failed job.
            </summary>
        </member>
        <member name="M:ServiceStack.Jobs.IBackgroundJobs.FailJob(ServiceStack.Jobs.BackgroundJob,System.Exception)">
            <summary>
            Marks a job as failed due to an exception.
            </summary>
        </member>
        <member name="M:ServiceStack.Jobs.IBackgroundJobs.FailJob(ServiceStack.Jobs.BackgroundJob,ServiceStack.ResponseStatus,System.Boolean)">
            <summary>
            Marks a job as failed that can optionally not be retried
            </summary>
        </member>
        <member name="M:ServiceStack.Jobs.IBackgroundJobs.CompleteJob(ServiceStack.Jobs.BackgroundJob,System.Object)">
            <summary>
            Marks a job as completed and transfers it from Job Queue to CompletedJob table in Monthly DB
            </summary>
        </member>
        <member name="M:ServiceStack.Jobs.IBackgroundJobs.UpdateJobStatus(ServiceStack.Jobs.BackgroundJobStatusUpdate)">
            <summary>
            Update a running jobs status
            </summary>
            <param name="status"></param>
        </member>
        <member name="M:ServiceStack.Jobs.IBackgroundJobs.StartAsync(System.Threading.CancellationToken)">
            <summary>
            Run Startup tasks to populate Job Queue with incomplete tasks 
            </summary>
        </member>
        <member name="M:ServiceStack.Jobs.IBackgroundJobs.TickAsync">
            <summary>
            Runs monitoring and periodic tasks 
            </summary>
        </member>
        <member name="M:ServiceStack.Jobs.IBackgroundJobs.GetWorkerQueueCounts">
            <summary>
            Get all named workers with their active queue counts 
            </summary>
        </member>
        <member name="M:ServiceStack.Jobs.IBackgroundJobs.GetWorkerStats">
            <summary>
            Get execution stats of all named workers
            </summary>
        </member>
        <member name="M:ServiceStack.Jobs.IBackgroundJobs.OpenDb">
            <summary>
            Returns an open ADO .NET Connection to the jobs.db
            </summary>
        </member>
        <member name="M:ServiceStack.Jobs.IBackgroundJobs.OpenMonthDb(System.DateTime)">
            <summary>
            Returns an open ADO .NET Connection to the monthly jobs.db indicated by CreatedDate
            </summary>
        </member>
        <member name="M:ServiceStack.Jobs.IBackgroundJobs.GetJob(System.Int64)">
            <summary>
            Retrieves a job by its Job Id
            </summary>
        </member>
        <member name="M:ServiceStack.Jobs.IBackgroundJobs.GetJobByRefId(System.String)">
            <summary>
            Retrieves a job by its unique Ref Id
            </summary>
        </member>
        <member name="M:ServiceStack.Jobs.IBackgroundJobs.CreateRequest(ServiceStack.Jobs.BackgroundJobBase)">
            <summary>
            Rehydrates the Request DTO from a persisted Background Job
            </summary>
        </member>
        <member name="M:ServiceStack.Jobs.IBackgroundJobs.CreateResponse(ServiceStack.Jobs.BackgroundJobBase)">
            <summary>
            Rehydrates the Response from a persisted Background Job
            </summary>
        </member>
        <member name="M:ServiceStack.Jobs.IBackgroundJobs.RecurringApi(System.String,ServiceStack.Jobs.Schedule,System.Object,ServiceStack.Jobs.BackgroundJobOptions)">
            <summary>
            Schedules a recurring API task.
            </summary>
        </member>
        <member name="M:ServiceStack.Jobs.IBackgroundJobs.RecurringCommand(System.String,ServiceStack.Jobs.Schedule,System.String,System.Object,ServiceStack.Jobs.BackgroundJobOptions)">
            <summary>
            Schedules a recurring command task.
            </summary>
        </member>
        <member name="M:ServiceStack.Jobs.IBackgroundJobs.DeleteRecurringTask(System.String)">
            <summary>
            Deletes a recurring task.
            </summary>
        </member>
        <member name="M:ServiceStack.Jobs.IBackgroundJobs.GetCommandEstimatedDurationMs(System.String,System.String)">
            <summary>
            Returns the estimated duration of a Command Job in milliseconds
            </summary>
        </member>
        <member name="M:ServiceStack.Jobs.IBackgroundJobs.GetApiEstimatedDurationMs(System.String,System.String)">
            <summary>
            Returns the estimated duration of an API Job in milliseconds
            </summary>
        </member>
        <member name="T:ServiceStack.Jobs.BackgroundJobRef">
            <summary>
            Reference of a Queued Job 
            </summary>
        </member>
        <member name="M:ServiceStack.Jobs.BackgroundJobRef.#ctor(System.Int64,System.String)">
            <summary>
            Reference of a Queued Job 
            </summary>
        </member>
        <member name="T:ServiceStack.Jobs.BackgroundJobStatusUpdate">
            <summary>
            Status Update of a Job
            </summary>
        </member>
        <member name="M:ServiceStack.Jobs.BackgroundJobStatusUpdate.#ctor(ServiceStack.Jobs.BackgroundJob,System.Nullable{System.Double},System.String,System.String)">
            <summary>
            Status Update of a Job
            </summary>
        </member>
        <member name="T:ServiceStack.Jobs.BackgroundJobOptions">
            <summary>
            Customize Queued Job Options
            </summary>
        </member>
        <member name="P:ServiceStack.Jobs.BackgroundJobOptions.RefId">
            <summary>
            Specify a user-defined UUID for the Job
            </summary>
        </member>
        <member name="P:ServiceStack.Jobs.BackgroundJobOptions.ParentId">
            <summary>
            Maintain a Reference to a parent Job
            </summary>
        </member>
        <member name="P:ServiceStack.Jobs.BackgroundJobOptions.Worker">
            <summary>
            Named Worker Thread to execute Job on  
            </summary>
        </member>
        <member name="P:ServiceStack.Jobs.BackgroundJobOptions.RunAfter">
            <summary>
            Only run Job after date
            </summary>
        </member>
        <member name="P:ServiceStack.Jobs.BackgroundJobOptions.Callback">
            <summary>
            Command to Execute after successful completion of Job
            </summary>
        </member>
        <member name="P:ServiceStack.Jobs.BackgroundJobOptions.DependsOn">
            <summary>
            Only execute job after successful completion of Parent Job
            </summary>
        </member>
        <member name="P:ServiceStack.Jobs.BackgroundJobOptions.UserId">
            <summary>
            The ASP .NET Identity Auth User Id to populate the IRequest Context ClaimsPrincipal and User Session
            </summary>
        </member>
        <member name="P:ServiceStack.Jobs.BackgroundJobOptions.RetryLimit">
            <summary>
            How many times to attempt to retry Job on failure, default 2 (BackgroundsJobFeature.DefaultRetryLimit)
            </summary>
        </member>
        <member name="P:ServiceStack.Jobs.BackgroundJobOptions.ReplyTo">
            <summary>
            Maintain a reference to a callback URL
            </summary>
        </member>
        <member name="P:ServiceStack.Jobs.BackgroundJobOptions.Tag">
            <summary>
            Associate Job with a tag group
            </summary>
        </member>
        <member name="P:ServiceStack.Jobs.BackgroundJobOptions.RunCommand">
            <summary>
            Whether command should be run and not persisted
            </summary>
        </member>
        <member name="T:ServiceStack.Jobs.WorkerStats">
            <summary>
            Captures Stats of a Background Job Worker
            </summary>
        </member>
        <member name="T:ServiceStack.Jobs.ScheduledTask">
            <summary>
            Data Model to capture a reoccurring task
            </summary>
        </member>
        <member name="T:ServiceStack.Jobs.Schedule">
            <summary>
            Represents the scheduled task to run at intervals or by Cron expression
            </summary>
        </member>
        <member name="M:ServiceStack.Jobs.Schedule.#ctor(System.Nullable{System.TimeSpan})">
            <summary>
            Create a schedule with an interval
            </summary>
        </member>
        <member name="M:ServiceStack.Jobs.Schedule.#ctor(System.String)">
            <summary>
            Run on a specific interval specified by a cron expression, see: https://en.wikipedia.org/wiki/Cron
            </summary>
        </member>
        <member name="M:ServiceStack.Jobs.Schedule.Interval(System.TimeSpan)">
            <summary>
            Create a schedule with an interval
            </summary>
        </member>
        <member name="M:ServiceStack.Jobs.Schedule.Cron(System.String)">
            <summary>
            Run on a specific interval specified by a cron expression, see: https://en.wikipedia.org/wiki/Cron
            </summary>
        </member>
        <member name="P:ServiceStack.Jobs.Schedule.EveryMinute">
            <summary>
            Run once a minute at the beginning of the minute
            </summary>
        </member>
        <member name="P:ServiceStack.Jobs.Schedule.Hourly">
            <summary>
            Run once an hour at the beginning of the hour
            </summary>
        </member>
        <member name="P:ServiceStack.Jobs.Schedule.Daily">
            <summary>
            Run once a day at midnight
            </summary>
        </member>
        <member name="P:ServiceStack.Jobs.Schedule.Weekly">
            <summary>
            Run once a week at midnight on Sunday morning
            </summary>
        </member>
        <member name="P:ServiceStack.Jobs.Schedule.Monthly">
            <summary>
            Run once a month at midnight of the first day of the month
            </summary>
        </member>
        <member name="P:ServiceStack.Jobs.Schedule.Yearly">
            <summary>
            Run once a year at midnight of 1 January
            </summary>
        </member>
        <member name="T:ServiceStack.Logging.GenericLogger">
            <summary>
            Helper ILog implementation that reduces effort to extend or use without needing to impl each API
            </summary>
        </member>
        <member name="M:ServiceStack.Logging.GenericLogger.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="!:ServiceStack.Logging.DebugLogger"/> class.
            </summary>
        </member>
        <member name="M:ServiceStack.Logging.GenericLogger.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="!:ServiceStack.Logging.DebugLogger"/> class.
            </summary>
        </member>
        <member name="M:ServiceStack.Logging.GenericLogger.Log(System.Object,System.Exception)">
            <summary>
            Logs the specified message.
            </summary>
        </member>
        <member name="M:ServiceStack.Logging.GenericLogger.LogFormat(System.Object,System.Object[])">
            <summary>
            Logs the format.
            </summary>
        </member>
        <member name="M:ServiceStack.Logging.GenericLogger.Log(System.Object)">
            <summary>
            Logs the specified message.
            </summary>
        </member>
        <member name="T:ServiceStack.Logging.ILog">
            <summary>
            Logs a message in a running application
            </summary>
        </member>
        <member name="P:ServiceStack.Logging.ILog.IsDebugEnabled">
            <summary>
            Gets or sets a value indicating whether this instance is debug enabled.
            </summary>
            <value>
            	<c>true</c> if this instance is debug enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:ServiceStack.Logging.ILog.Debug(System.Object)">
            <summary>
            Logs a Debug message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:ServiceStack.Logging.ILog.Debug(System.Object,System.Exception)">
            <summary>
            Logs a Debug message and exception.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:ServiceStack.Logging.ILog.DebugFormat(System.String,System.Object[])">
            <summary>
            Logs a Debug format message.
            </summary>
            <param name="format">The format.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:ServiceStack.Logging.ILog.Error(System.Object)">
            <summary>
            Logs a Error message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:ServiceStack.Logging.ILog.Error(System.Object,System.Exception)">
            <summary>
            Logs a Error message and exception.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:ServiceStack.Logging.ILog.ErrorFormat(System.String,System.Object[])">
            <summary>
            Logs a Error format message.
            </summary>
            <param name="format">The format.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:ServiceStack.Logging.ILog.Fatal(System.Object)">
            <summary>
            Logs a Fatal message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:ServiceStack.Logging.ILog.Fatal(System.Object,System.Exception)">
            <summary>
            Logs a Fatal message and exception.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:ServiceStack.Logging.ILog.FatalFormat(System.String,System.Object[])">
            <summary>
            Logs a Error format message.
            </summary>
            <param name="format">The format.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:ServiceStack.Logging.ILog.Info(System.Object)">
            <summary>
            Logs an Info message and exception.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:ServiceStack.Logging.ILog.Info(System.Object,System.Exception)">
            <summary>
            Logs an Info message and exception.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:ServiceStack.Logging.ILog.InfoFormat(System.String,System.Object[])">
            <summary>
            Logs an Info format message.
            </summary>
            <param name="format">The format.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:ServiceStack.Logging.ILog.Warn(System.Object)">
            <summary>
            Logs a Warning message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:ServiceStack.Logging.ILog.Warn(System.Object,System.Exception)">
            <summary>
            Logs a Warning message and exception.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:ServiceStack.Logging.ILog.WarnFormat(System.String,System.Object[])">
            <summary>
            Logs a Warning format message.
            </summary>
            <param name="format">The format.</param>
            <param name="args">The args.</param>
        </member>
        <member name="T:ServiceStack.Logging.ILogTrace">
            <summary>
            When implemented will log as TRACE otherwise as DEBUG
            </summary>
        </member>
        <member name="P:ServiceStack.Logging.ILogTrace.IsTraceEnabled">
            <summary>
            Gets or sets a value indicating whether this instance is trace enabled.
            </summary>
            <value>
            	<c>true</c> if this instance is trace enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:ServiceStack.Logging.ILogTrace.Trace(System.Object)">
            <summary>
            Logs a Trace message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:ServiceStack.Logging.ILogTrace.Trace(System.Object,System.Exception)">
            <summary>
            Logs a Trace message and exception.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:ServiceStack.Logging.ILogTrace.TraceFormat(System.String,System.Object[])">
            <summary>
            Logs a Trace format message.
            </summary>
            <param name="format">The format.</param>
            <param name="args">The args.</param>
        </member>
        <member name="T:ServiceStack.Logging.ILogFactory">
            <summary>
            Factory to create ILog instances
            </summary>
        </member>
        <member name="M:ServiceStack.Logging.ILogFactory.GetLogger(System.Type)">
            <summary>
            Gets the logger.
            </summary>
        </member>
        <member name="M:ServiceStack.Logging.ILogFactory.GetLogger(System.String)">
            <summary>
            Gets the logger.
            </summary>
        </member>
        <member name="M:ServiceStack.Logging.ILogWithContext.PushProperty(System.String,System.Object)">
            <summary>
            Pushes a property on the current log context, returning an <see cref="T:System.IDisposable"/>
            to remove the property again from the async context.
            </summary>
            <param name="key">Property Name</param>
            <param name="value">Property Value</param>
            <returns>Interface for popping the property off the stack</returns>
        </member>
        <member name="M:ServiceStack.Logging.ILogWithContextExtensions.PushProperty(ServiceStack.Logging.ILog,System.String,System.Object)">
            <summary>
            Pushes a property on the current log context, returning an <see cref="T:System.IDisposable"/>
            to remove the property again from the async context.
            </summary>
            <param name="logger">The logger</param>
            <param name="key">Property Name</param>
            <param name="value">Property Value</param>
            <returns>Interface for popping the property off the stack</returns>
        </member>
        <member name="M:ServiceStack.Logging.ILogWithException.Debug(System.Exception,System.String,System.Object[])">
            <summary>
            Logs a Debug format message and exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="format">The format.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:ServiceStack.Logging.ILogWithException.Info(System.Exception,System.String,System.Object[])">
            <summary>
            Logs an Info format message and exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="format">The format.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:ServiceStack.Logging.ILogWithException.Warn(System.Exception,System.String,System.Object[])">
            <summary>
            Logs a Warn format message and exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="format">The format.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:ServiceStack.Logging.ILogWithException.Error(System.Exception,System.String,System.Object[])">
            <summary>
            Logs an Error format message and exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="format">The format.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:ServiceStack.Logging.ILogWithException.Fatal(System.Exception,System.String,System.Object[])">
            <summary>
            Logs a Fatal format message and exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="format">The format.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:ServiceStack.Logging.ILogWithExceptionExtensions.Debug(ServiceStack.Logging.ILog,System.Exception,System.String,System.Object[])">
            <summary>
            Logs a Debug format message and exception.
            </summary>
            <param name="logger">The logger</param>
            <param name="exception">Exception related to the event.</param>
            <param name="format">The format.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:ServiceStack.Logging.ILogWithExceptionExtensions.Info(ServiceStack.Logging.ILog,System.Exception,System.String,System.Object[])">
            <summary>
            Logs an Info format message and exception.
            </summary>
            <param name="logger">The logger</param>
            <param name="exception">Exception related to the event.</param>
            <param name="format">The format.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:ServiceStack.Logging.ILogWithExceptionExtensions.Warn(ServiceStack.Logging.ILog,System.Exception,System.String,System.Object[])">
            <summary>
            Logs a Warn format message and exception.
            </summary>
            <param name="logger">The logger</param>
            <param name="exception">Exception related to the event.</param>
            <param name="format">The format.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:ServiceStack.Logging.ILogWithExceptionExtensions.Error(ServiceStack.Logging.ILog,System.Exception,System.String,System.Object[])">
            <summary>
            Logs an Error format message and exception.
            </summary>
            <param name="logger">The logger</param>
            <param name="exception">Exception related to the event.</param>
            <param name="format">The format.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:ServiceStack.Logging.ILogWithExceptionExtensions.Fatal(ServiceStack.Logging.ILog,System.Exception,System.String,System.Object[])">
            <summary>
            Logs a Fatal format message and exception.
            </summary>
            <param name="logger">The logger</param>
            <param name="exception">Exception related to the event.</param>
            <param name="format">The format.</param>
            <param name="args">The args.</param>
        </member>
        <member name="T:ServiceStack.Logging.LogManager">
            <summary>
            Logging API for this library. You can inject your own implementation otherwise
            will use the DebugLogFactory to write to System.Diagnostics.Debug
            </summary>
        </member>
        <member name="P:ServiceStack.Logging.LogManager.LogFactory">
            <summary>
            Gets or sets the log factory.
            Use this to override the factory that is used to create loggers
            </summary>
        </member>
        <member name="M:ServiceStack.Logging.LogManager.GetLogger(System.Type)">
            <summary>
            Gets the logger.
            </summary>
        </member>
        <member name="M:ServiceStack.Logging.LogManager.GetLogger(System.String)">
            <summary>
            Gets the logger.
            </summary>
        </member>
        <member name="T:ServiceStack.Logging.NullDebugLogger">
            <summary>
            Default logger is to System.Diagnostics.Debug.Print
            
            Made public so its testable
            </summary>
        </member>
        <member name="M:ServiceStack.Logging.NullDebugLogger.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="!:DebugLogger"/> class.
            </summary>
        </member>
        <member name="M:ServiceStack.Logging.NullDebugLogger.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="!:DebugLogger"/> class.
            </summary>
        </member>
        <member name="M:ServiceStack.Logging.NullDebugLogger.Log(System.Object,System.Exception)">
            <summary>
            Logs the specified message.
            </summary>
        </member>
        <member name="M:ServiceStack.Logging.NullDebugLogger.LogFormat(System.Object,System.Object[])">
            <summary>
            Logs the format.
            </summary>
        </member>
        <member name="M:ServiceStack.Logging.NullDebugLogger.Log(System.Object)">
            <summary>
            Logs the specified message.
            </summary>
        </member>
        <member name="T:ServiceStack.Logging.NullLogFactory">
            <summary>
            Creates a Debug Logger, that logs all messages to: System.Diagnostics.Debug
            
            Made public so its testable
            </summary>
        </member>
        <member name="T:ServiceStack.Logging.StringBuilderLogFactory">
            <summary>
            StringBuilderLog writes to shared StringBuffer.
            Made public so its testable
            </summary>
        </member>
        <member name="M:ServiceStack.Logging.StringBuilderLog.Log(System.Object,System.Exception)">
            <summary>
            Logs the specified message.
            </summary>
        </member>
        <member name="M:ServiceStack.Logging.StringBuilderLog.LogFormat(System.Object,System.Object[])">
            <summary>
            Logs the format.
            </summary>
        </member>
        <member name="M:ServiceStack.Logging.StringBuilderLog.Log(System.Object)">
            <summary>
            Logs the specified message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="T:ServiceStack.Logging.TestLogFactory">
            <summary>
            Creates a test Logger, that stores all log messages in a member list
            </summary>
        </member>
        <member name="T:ServiceStack.Logging.TestLogger">
            <summary>
            Tests logger which  stores all log messages in a member list which can be examined later
            
            Made public so its testable
            </summary>
        </member>
        <member name="M:ServiceStack.Logging.TestLogger.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.Logging.TestLogger"/> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:ServiceStack.Logging.TestLogger.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.Logging.TestLogger"/> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:ServiceStack.Logging.TestLogger.Log(ServiceStack.Logging.TestLogger.Levels,System.Object,System.Exception)">
            <summary>
            Logs the specified message.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:ServiceStack.Logging.TestLogger.LogFormat(ServiceStack.Logging.TestLogger.Levels,System.Object,System.Object[])">
            <summary>
            Logs the format.
            </summary>
            <param name="message">The message.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:ServiceStack.Logging.TestLogger.Log(ServiceStack.Logging.TestLogger.Levels,System.Object)">
            <summary>
            Logs the specified message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="T:ServiceStack.Messaging.IMessageHandler">
            <summary>
            Single threaded message handler that can process all messages
            of a particular message type.
            </summary>
        </member>
        <member name="P:ServiceStack.Messaging.IMessageHandler.MessageType">
            <summary>
            The type of the message this handler processes
            </summary>
        </member>
        <member name="P:ServiceStack.Messaging.IMessageHandler.MqClient">
            <summary>
            The MqClient processing the message
            </summary>
        </member>
        <member name="M:ServiceStack.Messaging.IMessageHandler.Process(ServiceStack.Messaging.IMessageQueueClient)">
            <summary>
            Process all messages pending
            </summary>
            <param name="mqClient"></param>
        </member>
        <member name="M:ServiceStack.Messaging.IMessageHandler.ProcessQueue(ServiceStack.Messaging.IMessageQueueClient,System.String,System.Func{System.Boolean})">
            <summary>
            Process messages from a single queue.
            </summary>
            <param name="mqClient"></param>
            <param name="queueName">The queue to process</param>
            <param name="doNext">A predicate on whether to continue processing the next message if any</param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Messaging.IMessageHandler.ProcessMessage(ServiceStack.Messaging.IMessageQueueClient,System.Object)">
            <summary>
            Process a single message
            </summary>
        </member>
        <member name="M:ServiceStack.Messaging.IMessageHandler.GetStats">
            <summary>
            Get Current Stats for this Message Handler
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Messaging.IMessageQueueClient.Publish(System.String,ServiceStack.Messaging.IMessage)">
            <summary>
            Publish the specified message into the durable queue @queueName
            </summary>
        </member>
        <member name="M:ServiceStack.Messaging.IMessageQueueClient.Notify(System.String,ServiceStack.Messaging.IMessage)">
            <summary>
            Publish the specified message into the transient queue @queueName
            </summary>
        </member>
        <member name="M:ServiceStack.Messaging.IMessageQueueClient.Get``1(System.String,System.Nullable{System.TimeSpan})">
            <summary>
            Synchronous blocking get.
            </summary>
        </member>
        <member name="M:ServiceStack.Messaging.IMessageQueueClient.GetAsync``1(System.String)">
            <summary>
            Non blocking get message
            </summary>
        </member>
        <member name="M:ServiceStack.Messaging.IMessageQueueClient.Ack(ServiceStack.Messaging.IMessage)">
            <summary>
            Acknowledge the message has been successfully received or processed
            </summary>
        </member>
        <member name="M:ServiceStack.Messaging.IMessageQueueClient.Nak(ServiceStack.Messaging.IMessage,System.Boolean,System.Exception)">
            <summary>
            Negative acknowledgement the message was not processed correctly
            </summary>
        </member>
        <member name="M:ServiceStack.Messaging.IMessageQueueClient.CreateMessage``1(System.Object)">
            <summary>
            Create a typed message from a raw MQ Response artefact
            </summary>
        </member>
        <member name="M:ServiceStack.Messaging.IMessageQueueClient.GetTempQueueName">
            <summary>
            Create a temporary Queue for Request / Reply
            </summary>
            <returns></returns>
        </member>
        <member name="T:ServiceStack.Messaging.IMessageService">
            <summary>
            Simple definition of an MQ Host
            </summary>
        </member>
        <member name="P:ServiceStack.Messaging.IMessageService.MessageFactory">
            <summary>
            Factory to create consumers and producers that work with this service
            </summary>
        </member>
        <member name="M:ServiceStack.Messaging.IMessageService.RegisterHandler``1(System.Func{ServiceStack.Messaging.IMessage{``0},System.Object})">
            <summary>
            Register DTOs and handlers the MQ Server will process
            </summary>
            <typeparam name="T"></typeparam>
            <param name="processMessageFn"></param>
        </member>
        <member name="M:ServiceStack.Messaging.IMessageService.RegisterHandler``1(System.Func{ServiceStack.Messaging.IMessage{``0},System.Object},System.Int32)">
            <summary>
            Register DTOs and handlers the MQ Server will process using specified number of threads
            </summary>
            <typeparam name="T"></typeparam>
            <param name="processMessageFn"></param>
            <param name="noOfThreads"></param>
        </member>
        <member name="M:ServiceStack.Messaging.IMessageService.RegisterHandler``1(System.Func{ServiceStack.Messaging.IMessage{``0},System.Object},System.Action{ServiceStack.Messaging.IMessageHandler,ServiceStack.Messaging.IMessage{``0},System.Exception})">
            <summary>
            Register DTOs and handlers the MQ Server will process
            </summary>
            <typeparam name="T"></typeparam>
            <param name="processMessageFn"></param>
            <param name="processExceptionEx"></param>
        </member>
        <member name="M:ServiceStack.Messaging.IMessageService.RegisterHandler``1(System.Func{ServiceStack.Messaging.IMessage{``0},System.Object},System.Action{ServiceStack.Messaging.IMessageHandler,ServiceStack.Messaging.IMessage{``0},System.Exception},System.Int32)">
            <summary>
            Register DTOs and handlers the MQ Server will process using specified number of threads
            </summary>
            <typeparam name="T"></typeparam>
            <param name="processMessageFn"></param>
            <param name="processExceptionEx"></param>
            <param name="noOfThreads"></param>
        </member>
        <member name="M:ServiceStack.Messaging.IMessageService.GetStats">
            <summary>
            Get Total Current Stats for all Message Handlers
            </summary>
            <returns></returns>
        </member>
        <member name="P:ServiceStack.Messaging.IMessageService.RegisteredTypes">
            <summary>
            Get a list of all message types registered on this MQ Host
            </summary>
        </member>
        <member name="M:ServiceStack.Messaging.IMessageService.GetStatus">
            <summary>
            Get the status of the service. Potential Statuses: Disposed, Stopped, Stopping, Starting, Started
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Messaging.IMessageService.GetStatsDescription">
            <summary>
            Get a Stats dump
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Messaging.IMessageService.Start">
            <summary>
            Start the MQ Host if not already started.
            </summary>
        </member>
        <member name="M:ServiceStack.Messaging.IMessageService.Stop">
            <summary>
            Stop the MQ Host if not already stopped. 
            </summary>
        </member>
        <member name="T:ServiceStack.Messaging.Message`1">
            <summary>
            Basic implementation of IMessage[T]
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:ServiceStack.Messaging.QueueNames`1">
            <summary>
            Util static generic class to create unique queue names for types
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:ServiceStack.Messaging.QueueNames">
            <summary>
            Util class to create unique queue names for runtime types
            </summary>
        </member>
        <member name="T:ServiceStack.Messaging.UnRetryableMessagingException">
            <summary>
            For messaging exceptions that should by-pass the messaging service's configured
            retry attempts and store the message straight into the DLQ
            </summary>
        </member>
        <member name="T:ServiceStack.MultiPartFieldAttribute">
            A simple solution to handle FormData Content Type that would otherwise require a ModelBinder
            https://docs.microsoft.com/en-us/aspnet/core/mvc/advanced/custom-model-binding?view=aspnetcore-6.0
            That uses MultipartReader to parse the stream reuqest body
            https://docs.microsoft.com/en-us/aspnet/core/mvc/models/file-uploads?view=aspnetcore-6.0#upload-large-files-with-streaming
        </member>
        <member name="T:ServiceStack.NavItem">
            <summary>
            NavItem in ViewUtils.NavItems and ViewUtils.NavItemsMap
            </summary>
        </member>
        <member name="P:ServiceStack.NavItem.Label">
            <summary>
            Link Label
            </summary>
        </member>
        <member name="P:ServiceStack.NavItem.Href">
            <summary>
            Link href
            </summary>
        </member>
        <member name="P:ServiceStack.NavItem.Exact">
            <summary>
            Whether NavItem should only be considered active when paths 
            are an exact match otherwise checks if ActivePath starts with Path
            </summary>
        </member>
        <member name="P:ServiceStack.NavItem.Id">
            <summary>
            Emit id="{Id}"
            </summary>
        </member>
        <member name="P:ServiceStack.NavItem.ClassName">
            <summary>
            Override class="{Class}"
            </summary>
        </member>
        <member name="P:ServiceStack.NavItem.IconClass">
            <summary>
            Icon class (if any)
            </summary>
        </member>
        <member name="P:ServiceStack.NavItem.IconSrc">
            <summary>
            Icon src (if any)
            </summary>
        </member>
        <member name="P:ServiceStack.NavItem.Show">
            <summary>
            Only show if NavOptions.Attributes.Contains(Show) 
            </summary>
        </member>
        <member name="P:ServiceStack.NavItem.Hide">
            <summary>
            Do not show if NavOptions.Attributes.Contains(Hide) 
            </summary>
        </member>
        <member name="P:ServiceStack.NavItem.Children">
            <summary>
            Sub Menu Child NavItems
            </summary>
        </member>
        <member name="P:ServiceStack.NavItem.Meta">
            <summary>
            Attach additional custom metadata to this NavItem
            </summary>
        </member>
        <member name="T:ServiceStack.NotesAttribute">
            <summary>
            Document a longer form description about a Type
            </summary>
        </member>
        <member name="M:ServiceStack.NotesAttribute.#ctor(System.String)">
            <summary>
            Document a longer form description about a Type
            </summary>
        </member>
        <member name="P:ServiceStack.NotesAttribute.Notes">
            <summary>
            Get or sets a Label
            </summary>
        </member>
        <member name="T:ServiceStack.PageAttribute">
            <summary>
            Specify a VirtualPath or Layout for a Code Page
            </summary>
        </member>
        <member name="T:ServiceStack.PageArgAttribute">
            <summary>
            Specify static page arguments
            </summary>
        </member>
        <member name="T:ServiceStack.PriorityAttribute">
            <summary>
            Specify the order in which legacy Modular Startup classes are run
            </summary>
        </member>
        <member name="M:ServiceStack.PriorityAttribute.#ctor(System.Int32)">
            <summary>
            Specify the order in which legacy Modular Startup classes are run
            </summary>
        </member>
        <member name="T:ServiceStack.Redis.Generic.IRedisListAsync`1">
            <summary>
            Wrap the common redis list operations under a IList[string] interface.
            </summary>
        </member>
        <member name="T:ServiceStack.Redis.Generic.IRedisList`1">
            <summary>
            Wrap the common redis list operations under a IList[string] interface.
            </summary>
        </member>
        <member name="T:ServiceStack.Redis.Generic.IRedisTypedTransaction`1">
            <summary>
            Redis transaction for typed client
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:ServiceStack.Redis.Generic.IRedisTypedPipeline`1">
            <summary>
            Interface to redis typed pipeline
            </summary>
        </member>
        <member name="T:ServiceStack.Redis.Generic.IRedisTypedPipelineAsync`1">
            <summary>
            Interface to redis typed pipeline
            </summary>
        </member>
        <member name="T:ServiceStack.Redis.Generic.IRedisTypedQueueableOperation`1">
            <summary>
            interface to queueable operation using typed redis client
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:ServiceStack.Redis.Generic.IRedisTypedQueueableOperationAsync`1">
            <summary>
            interface to queueable operation using typed redis client
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:ServiceStack.Redis.Generic.IRedisTypedTransactionAsync`1">
            <summary>
            Redis transaction for typed client
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ServiceStack.Redis.IRedisClient.As``1">
            <summary>
            Returns a high-level typed client API
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ServiceStack.Redis.IRedisClientAsync.As``1">
            <summary>
            Returns a high-level typed client API
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ServiceStack.Redis.IRedisClientCacheManager.GetClient">
            <summary>
            Returns a Read/Write client (The default) using the hosts defined in ReadWriteHosts
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Redis.IRedisClientCacheManager.GetReadOnlyClient">
            <summary>
            Returns a ReadOnly client using the hosts defined in ReadOnlyHosts.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Redis.IRedisClientCacheManager.GetCacheClient">
            <summary>
            Returns a Read/Write ICacheClient (The default) using the hosts defined in ReadWriteHosts
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Redis.IRedisClientCacheManager.GetReadOnlyCacheClient">
            <summary>
            Returns a ReadOnly ICacheClient using the hosts defined in ReadOnlyHosts.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ServiceStack.Redis.IRedisClientsManager.RedisResolver">
            <summary>
            Resolver strategy for resolving hosts and creating clients
            </summary>
        </member>
        <member name="M:ServiceStack.Redis.IRedisClientsManager.GetClient">
            <summary>
            Returns a Read/Write client (The default) using the hosts defined in ReadWriteHosts
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Redis.IRedisClientsManager.GetReadOnlyClient">
            <summary>
            Returns a ReadOnly client using the hosts defined in ReadOnlyHosts.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Redis.IRedisClientsManager.GetCacheClient">
            <summary>
            Returns a Read/Write ICacheClient (The default) using the hosts defined in ReadWriteHosts
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Redis.IRedisClientsManager.GetReadOnlyCacheClient">
            <summary>
            Returns a ReadOnly ICacheClient using the hosts defined in ReadOnlyHosts.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ServiceStack.Redis.IRedisClientsManagerAsync.RedisResolver">
            <summary>
            Resolver strategy for resolving hosts and creating clients
            </summary>
        </member>
        <member name="M:ServiceStack.Redis.IRedisClientsManagerAsync.GetClientAsync(System.Threading.CancellationToken)">
            <summary>
            Returns a Read/Write client (The default) using the hosts defined in ReadWriteHosts
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Redis.IRedisClientsManagerAsync.GetReadOnlyClientAsync(System.Threading.CancellationToken)">
            <summary>
            Returns a ReadOnly client using the hosts defined in ReadOnlyHosts.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Redis.IRedisClientsManagerAsync.GetCacheClientAsync(System.Threading.CancellationToken)">
            <summary>
            Returns a Read/Write ICacheClient (The default) using the hosts defined in ReadWriteHosts
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Redis.IRedisClientsManagerAsync.GetReadOnlyCacheClientAsync(System.Threading.CancellationToken)">
            <summary>
            Returns a ReadOnly ICacheClient using the hosts defined in ReadOnlyHosts.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ServiceStack.Redis.IRedisEndpoint.Username">
            <summary>
            ACL Username
            </summary>
        </member>
        <member name="P:ServiceStack.Redis.IRedisSubscription.SubscriptionCount">
            <summary>
            The number of active subscriptions this client has
            </summary>
        </member>
        <member name="P:ServiceStack.Redis.IRedisSubscription.OnSubscribe">
            <summary>
            Registered handler called after client *Subscribes* to each new channel
            </summary>
        </member>
        <member name="P:ServiceStack.Redis.IRedisSubscription.OnMessage">
            <summary>
            Registered handler called when each message is received
            </summary>
        </member>
        <member name="P:ServiceStack.Redis.IRedisSubscription.OnMessageBytes">
            <summary>
            Registered handler called when each message is received
            </summary>
        </member>
        <member name="P:ServiceStack.Redis.IRedisSubscription.OnUnSubscribe">
            <summary>
            Registered handler called when each channel is unsubscribed
            </summary>
        </member>
        <member name="M:ServiceStack.Redis.IRedisSubscription.SubscribeToChannels(System.String[])">
            <summary>
            Subscribe to channels by name
            </summary>
            <param name="channels"></param>
        </member>
        <member name="M:ServiceStack.Redis.IRedisSubscription.SubscribeToChannelsMatching(System.String[])">
            <summary>
            Subscribe to channels matching the supplied patterns
            </summary>
            <param name="patterns"></param>
        </member>
        <member name="P:ServiceStack.Redis.IRedisSubscriptionAsync.SubscriptionCount">
            <summary>
            The number of active subscriptions this client has
            </summary>
        </member>
        <member name="E:ServiceStack.Redis.IRedisSubscriptionAsync.OnSubscribeAsync">
            <summary>
            Registered handler called after client *Subscribes* to each new channel
            </summary>
        </member>
        <member name="E:ServiceStack.Redis.IRedisSubscriptionAsync.OnMessageAsync">
            <summary>
            Registered handler called when each message is received
            </summary>
        </member>
        <member name="E:ServiceStack.Redis.IRedisSubscriptionAsync.OnMessageBytesAsync">
            <summary>
            Registered handler called when each message is received
            </summary>
        </member>
        <member name="E:ServiceStack.Redis.IRedisSubscriptionAsync.OnUnSubscribeAsync">
            <summary>
            Registered handler called when each channel is unsubscribed
            </summary>
        </member>
        <member name="M:ServiceStack.Redis.IRedisSubscriptionAsync.SubscribeToChannelsAsync(System.String[],System.Threading.CancellationToken)">
            <summary>
            Subscribe to channels by name
            </summary>
        </member>
        <member name="M:ServiceStack.Redis.IRedisSubscriptionAsync.SubscribeToChannelsAsync(System.String[])">
            <summary>
            Subscribe to channels by name
            </summary>
        </member>
        <member name="M:ServiceStack.Redis.IRedisSubscriptionAsync.SubscribeToChannelsMatchingAsync(System.String[],System.Threading.CancellationToken)">
            <summary>
            Subscribe to channels matching the supplied patterns
            </summary>
        </member>
        <member name="M:ServiceStack.Redis.IRedisSubscriptionAsync.SubscribeToChannelsMatchingAsync(System.String[])">
            <summary>
            Subscribe to channels matching the supplied patterns
            </summary>
        </member>
        <member name="T:ServiceStack.Redis.IRedisTransaction">
            <summary>
            Interface to redis transaction
            </summary>
        </member>
        <member name="T:ServiceStack.Redis.IRedisTransactionAsync">
            <summary>
            Interface to redis transaction
            </summary>
        </member>
        <member name="T:ServiceStack.Redis.IRedisTransactionBase">
            <summary>
            Base transaction interface, shared by typed and non-typed transactions
            </summary>
        </member>
        <member name="T:ServiceStack.Redis.IRedisTransactionBaseAsync">
            <summary>
            Base transaction interface, shared by typed and non-typed transactions
            </summary>
        </member>
        <member name="T:ServiceStack.Redis.Pipeline.IRedisPipeline">
            <summary>
            Interface to redis pipeline
            </summary>
        </member>
        <member name="T:ServiceStack.Redis.Pipeline.IRedisPipelineAsync">
            <summary>
            Interface to redis pipeline
            </summary>
        </member>
        <member name="T:ServiceStack.Redis.Pipeline.IRedisPipelineShared">
            <summary>
            Pipeline interface shared by typed and non-typed pipelines
            </summary>
        </member>
        <member name="T:ServiceStack.Redis.Pipeline.IRedisPipelineSharedAsync">
            <summary>
            Pipeline interface shared by typed and non-typed pipelines
            </summary>
        </member>
        <member name="T:ServiceStack.Redis.Pipeline.IRedisQueueableOperation">
            <summary>
            interface to operation that can queue commands
            </summary>
        </member>
        <member name="T:ServiceStack.Redis.Pipeline.IRedisQueueableOperationAsync">
            <summary>
            interface to operation that can queue commands
            </summary>
        </member>
        <member name="T:ServiceStack.Redis.Pipeline.IRedisQueueCompletableOperation">
            <summary>
            Interface to operations that allow queued commands to be completed
            </summary>
        </member>
        <member name="T:ServiceStack.Redis.Pipeline.IRedisQueueCompletableOperationAsync">
            <summary>
            Interface to operations that allow queued commands to be completed
            </summary>
        </member>
        <member name="T:ServiceStack.RefAttribute">
            <summary>
            Define UI References to external Data Models
            </summary>
        </member>
        <member name="T:ServiceStack.RequestLogEntry">
            <summary>
            A log entry added by the IRequestLogger
            </summary>
        </member>
        <member name="T:ServiceStack.ResponseError">
            <summary>
            Error information pertaining to a particular named field.
            Used for returning multiple field validation errors.s
            </summary>
        </member>
        <member name="T:ServiceStack.ResponseStatus">
            <summary>
            Common ResponseStatus class that should be present on all response DTO's
            </summary>
        </member>
        <member name="M:ServiceStack.ResponseStatus.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.ResponseStatus"/> class.
            
            A response status without an errorcode == success
            </summary>
        </member>
        <member name="M:ServiceStack.ResponseStatus.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.ResponseStatus"/> class.
            A response status with an errorcode == failure
            </summary>
        </member>
        <member name="M:ServiceStack.ResponseStatus.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ServiceStack.ResponseStatus"/> class.
            A response status with an errorcode == failure
            </summary>
        </member>
        <member name="P:ServiceStack.ResponseStatus.ErrorCode">
            <summary>
            Holds the custom ErrorCode enum if provided in ValidationException
            otherwise will hold the name of the Exception type, e.g. typeof(Exception).Name
            
            A value of non-null means the service encountered an error while processing the request.
            </summary>
        </member>
        <member name="P:ServiceStack.ResponseStatus.Message">
            <summary>
            A human friendly error message
            </summary>
        </member>
        <member name="P:ServiceStack.ResponseStatus.StackTrace">
            <summary>
            The Server StackTrace when DebugMode is enabled
            </summary>
        </member>
        <member name="P:ServiceStack.ResponseStatus.Errors">
            <summary>
            For multiple detailed validation errors.
            Can hold a specific error message for each named field.
            </summary>
        </member>
        <member name="P:ServiceStack.ResponseStatus.Meta">
            <summary>
            For additional custom metadata about the error
            </summary>
        </member>
        <member name="T:ServiceStack.RestrictAttribute">
            <summary>
            Restrict the accessibility of a service and its visibility in Metadata services
            </summary>
        </member>
        <member name="P:ServiceStack.RestrictAttribute.VisibleInternalOnly">
            <summary>
            Allow access but hide from metadata to requests from Localhost only
            </summary>
        </member>
        <member name="P:ServiceStack.RestrictAttribute.VisibleLocalhostOnly">
            <summary>
            Allow access but hide from metadata to requests from Localhost and Local Intranet only
            </summary>
        </member>
        <member name="P:ServiceStack.RestrictAttribute.LocalhostOnly">
            <summary>
            Restrict access and hide from metadata to requests from Localhost only
            </summary>
        </member>
        <member name="P:ServiceStack.RestrictAttribute.InternalOnly">
            <summary>
            Restrict access and hide from metadata to requests from Localhost and Local Intranet only
            </summary>
        </member>
        <member name="P:ServiceStack.RestrictAttribute.ExternalOnly">
            <summary>
            Restrict access and hide from metadata to requests from External only
            </summary>
        </member>
        <member name="P:ServiceStack.RestrictAttribute.AccessTo">
            <summary>
            Sets a single access restriction
            </summary>
            <value>Restrict Access to.</value>
        </member>
        <member name="P:ServiceStack.RestrictAttribute.AccessibleToAny">
            <summary>
            Restrict access to any of the specified access scenarios
            </summary>
            <value>Access restrictions</value>
        </member>
        <member name="P:ServiceStack.RestrictAttribute.VisibilityTo">
            <summary>
            Sets a single metadata Visibility restriction
            </summary>
            <value>Restrict metadata Visibility to.</value>
        </member>
        <member name="P:ServiceStack.RestrictAttribute.VisibleToAny">
            <summary>
            Restrict metadata visibility to any of the specified access scenarios
            </summary>
            <value>Visibility restrictions</value>
        </member>
        <member name="M:ServiceStack.RestrictAttribute.#ctor(ServiceStack.RequestAttributes[])">
            <summary>
            Restrict access and metadata visibility to any of the specified access scenarios
            </summary>
            <value>The restrict access to scenarios.</value>
        </member>
        <member name="M:ServiceStack.RestrictAttribute.#ctor(ServiceStack.RequestAttributes[],ServiceStack.RequestAttributes[])">
            <summary>
            Restrict access and metadata visibility to any of the specified access scenarios
            </summary>
            <value>The restrict access to scenarios.</value>
        </member>
        <member name="M:ServiceStack.RestrictAttribute.ToAllowedFlagsSet(ServiceStack.RequestAttributes[])">
            <summary>
            Returns the allowed set of scenarios based on the user-specified restrictions
            </summary>
            <param name="restrictToAny"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.RestrictExtensions.ToAllowedFlagsSet(ServiceStack.RequestAttributes)">
            <summary>
            Converts from a User intended restriction to a flag with all the allowed attribute flags set, e.g:
            
            If No Network restrictions were specified all Network access types are allowed, e.g:
                restrict EndpointAttributes.None => ... 111
            
            If a Network restriction was specified, only it will be allowed, e.g:
                restrict EndpointAttributes.LocalSubnet => ... 010
            
            The returned Enum will have a flag with all the allowed attributes set
            </summary>
            <param name="restrictTo"></param>
            <returns></returns>
        </member>
        <member name="T:ServiceStack.RouteAttribute">
            <summary>
            	Used to decorate Request DTO's to associate a RESTful request 
            	path mapping with a service.  Multiple attributes can be applied to 
            	each request DTO, to map multiple paths to the service.
            </summary>
        </member>
        <member name="M:ServiceStack.RouteAttribute.#ctor(System.String)">
            <summary>
            	<para>Initializes an instance of the <see cref="T:ServiceStack.RouteAttribute"/> class.</para>
            </summary>
            <param name="path">
            	<para>The path template to map to the request.  See 
            	<see cref="P:ServiceStack.RouteAttribute.Path">RouteAttribute.Path</see>
            	for details on the correct format.</para>
            </param>
        </member>
        <member name="M:ServiceStack.RouteAttribute.#ctor(System.String,System.String)">
            <summary>
            	<para>Initializes an instance of the <see cref="T:ServiceStack.RouteAttribute"/> class.</para>
            </summary>
            <param name="path">
            	<para>The path template to map to the request.  See 
            	<see cref="P:ServiceStack.RouteAttribute.Path">RouteAttribute.Path</see>
            	for details on the correct format.</para>
            </param>
            <param name="verbs">A comma-delimited list of HTTP verbs supported by the 
            	service.  If unspecified, all verbs are assumed to be supported.</param>
        </member>
        <member name="P:ServiceStack.RouteAttribute.Path">
            <summary>
            	Gets or sets the path template to be mapped to the request.
            </summary>
            <value>
            	A <see cref="T:System.String"/> value providing the path mapped to
            	the request.  Never <see langword="null"/>.
            </value>
            <remarks>
            	<para>Some examples of valid paths are:</para>
            
            	<list>
            		<item>"/Inventory"</item>
            		<item>"/Inventory/{Category}/{ItemId}"</item>
            		<item>"/Inventory/{ItemPath*}"</item>
            	</list>
            
            	<para>Variables are specified within "{}"
            	brackets.  Each variable in the path is mapped to the same-named property 
            	on the request DTO.  At runtime, ServiceStack will parse the 
            	request URL, extract the variable values, instantiate the request DTO,
            	and assign the variable values into the corresponding request properties,
            	prior to passing the request DTO to the service object for processing.</para>
            
            	<para>It is not necessary to specify all request properties as
            	variables in the path.  For unspecified properties, callers may provide 
            	values in the query string.  For example: the URL 
            	"http://services/Inventory?Category=Books&amp;ItemId=12345" causes the same 
            	request DTO to be processed as "http://services/Inventory/Books/12345", 
            	provided that the paths "/Inventory" (which supports the first URL) and 
            	"/Inventory/{Category}/{ItemId}" (which supports the second URL)
            	are both mapped to the request DTO.</para>
            
            	<para>Please note that while it is possible to specify property values
            	in the query string, it is generally considered to be less RESTful and
            	less desirable than to specify them as variables in the path.  Using the 
            	query string to specify property values may also interfere with HTTP
            	caching.</para>
            
            	<para>The final variable in the path may contain a "*" suffix
            	to grab all remaining segments in the path portion of the request URL and assign
            	them to a single property on the request DTO.
            	For example, if the path "/Inventory/{ItemPath*}" is mapped to the request DTO,
            	then the request URL "http://services/Inventory/Books/12345" will result
            	in a request DTO whose ItemPath property contains "Books/12345".
            	You may only specify one such variable in the path, and it must be positioned at
            	the end of the path.</para>
            </remarks>
        </member>
        <member name="P:ServiceStack.RouteAttribute.Summary">
            <summary>
               Gets or sets short summary of what the route does.
            </summary>
        </member>
        <member name="P:ServiceStack.RouteAttribute.Notes">
            <summary>
               Gets or sets longer text to explain the behaviour of the route. 
            </summary>
        </member>
        <member name="P:ServiceStack.RouteAttribute.Verbs">
            <summary>
            	Gets or sets a comma-delimited list of HTTP verbs supported by the service, such as
            	"GET,PUT,POST,DELETE".
            </summary>
            <value>
            	A <see cref="T:System.String"/> providing a comma-delimited list of HTTP verbs supported
            	by the service, <see langword="null"/> or empty if all verbs are supported.
            </value>
        </member>
        <member name="P:ServiceStack.RouteAttribute.Priority">
            <summary>
            Used to rank the precedences of route definitions in reverse routing. 
            i.e. Priorities below 0 are auto-generated have less precedence.
            </summary>
        </member>
        <member name="P:ServiceStack.RouteAttribute.Matches">
            <summary>
            Must match rule defined in Config.RequestRules or Regex expression with format: 
            "{IHttpRequest.Field} =~ {pattern}", e.g "PathInfo =~ \/[0-9]+$"
            </summary>
        </member>
        <member name="T:ServiceStack.FallbackRouteAttribute">
            <summary>
            Fallback routes have the lowest precedence, i.e. after normal Routes, static files or any matching Catch All Handlers.
            </summary>
        </member>
        <member name="T:ServiceStack.IScriptValue">
            <summary>
            Define a rich value that can either be a value, a constant JS Expression or a #Script Code script
            </summary>
        </member>
        <member name="P:ServiceStack.IScriptValue.Value">
            <summary>
            Use constant Value
            </summary>
        </member>
        <member name="P:ServiceStack.IScriptValue.Expression">
            <summary>
            Create Value by Evaluating a #Script JS Expression. Lightweight, only evaluates an AST Token.
            Results are only evaluated *once* and cached globally in AppHost.ScriptContext.Cache
            </summary>
        </member>
        <member name="P:ServiceStack.IScriptValue.Eval">
            <summary>
            Create Value by evaluating #Script Code, results of same expression are cached per request
            </summary>
        </member>
        <member name="P:ServiceStack.IScriptValue.NoCache">
            <summary>
            Whether to disable result caching for this Script Value
            </summary>
        </member>
        <member name="T:ServiceStack.StrictModeException">
            <summary>
            Additional checks to notify of invalid state, configuration or use of ServiceStack libraries.
            Can disable StrictMode checks with Config.StrictMode = false;
            </summary>
        </member>
        <member name="T:ServiceStack.ExplorerCssAttribute">
            <summary>
            Customize the Form and Field CSS in API Explorer Forms
            </summary>
        </member>
        <member name="T:ServiceStack.LocodeCssAttribute">
            <summary>
            Customize the Form and Field CSS in Locode Forms
            </summary>
        </member>
        <member name="T:ServiceStack.FieldCssAttribute">
            <summary>
            Customize a Property Form Field CSS
            </summary>
        </member>
        <member name="P:ServiceStack.TagAttribute.Name">
            <summary>
            Get or sets tag name
            </summary>
        </member>
        <member name="T:ServiceStack.UploadToAttribute">
            <summary>
            Specify which File Upload location should be used to manage these file uploads
            </summary>
        </member>
        <member name="M:ServiceStack.UploadToAttribute.#ctor(System.String)">
            <summary>
            Specify which File Upload location should be used to manage these file uploads
            </summary>
        </member>
        <member name="T:ServiceStack.ValidateRequestAttribute">
            <summary>
            Assert pre-conditions before DTO's Fluent Validation properties are evaluated
            </summary>
        </member>
        <member name="P:ServiceStack.ValidateRequestAttribute.Validator">
            <summary>
            Script Expression to create an IPropertyValidator registered in Validators.Types
            </summary>
        </member>
        <member name="P:ServiceStack.ValidateRequestAttribute.Condition">
            <summary>
            Boolean #Script Code Expression to Test
            ARGS:
              - Request: IRequest
              -     dto: Request DTO
              -      it: Request DTO
            </summary>
        </member>
        <member name="P:ServiceStack.ValidateRequestAttribute.Conditions">
            <summary>
            Combine multiple conditions
            </summary>
        </member>
        <member name="P:ServiceStack.ValidateRequestAttribute.ErrorCode">
            <summary>
            Custom ErrorCode to return 
            </summary>
        </member>
        <member name="P:ServiceStack.ValidateRequestAttribute.Message">
            <summary>
            Custom Error Message to return
             - {PropertyName}
             - {PropertyValue}
            </summary>
        </member>
        <member name="P:ServiceStack.ValidateRequestAttribute.StatusCode">
            <summary>
            Custom Status Code to return when invalid
            </summary>
        </member>
        <member name="T:ServiceStack.ValidateAttribute">
            <summary>
            Validate property against registered Validator expression
            </summary>
        </member>
        <member name="P:ServiceStack.ValidateAttribute.Validator">
            <summary>
            Script Expression to create an IPropertyValidator registered in Validators.Types
            </summary>
        </member>
        <member name="P:ServiceStack.ValidateAttribute.Condition">
            <summary>
            Boolean #Script Code Expression to Test
            ARGS:
              - Request: IRequest
              -     dto: Request DTO
              -   field: Property Name
              -      it: Property Value
            </summary>
        </member>
        <member name="P:ServiceStack.ValidateAttribute.ErrorCode">
            <summary>
            Custom ErrorCode to return 
            </summary>
        </member>
        <member name="P:ServiceStack.ValidateAttribute.Message">
            <summary>
            Refer to FluentValidation docs for Variable
             - {PropertyName}
             - {PropertyValue}
            </summary>
        </member>
        <member name="T:ServiceStack.AllowResetAttribute">
            <summary>
            Override to allow a property to be reset back to their default values using partial updates.
            By default properties with any validators cannot be reset
            </summary>
        </member>
        <member name="T:ServiceStack.DenyResetAttribute">
            <summary>
            Don't allow property to be reset
            </summary>
        </member>
        <member name="T:ServiceStack.ValidateCreditCardAttribute">
            <summary>
            Validate property against Fluent Validation CreditCardValidator
            </summary>
        </member>
        <member name="M:ServiceStack.ValidateCreditCardAttribute.#ctor">
            <summary>
            Validate property against Fluent Validation CreditCardValidator
            </summary>
        </member>
        <member name="T:ServiceStack.ValidationRule">
            <summary>
            Data persistence Model 
            </summary>
        </member>
        <member name="P:ServiceStack.ValidationRule.Type">
            <summary>
            The name of the Type 
            </summary>
        </member>
        <member name="P:ServiceStack.ValidationRule.Field">
            <summary>
            The property field for Property Validators, null for Type Validators 
            </summary>
        </member>
        <member name="P:ServiceStack.Web.ICookies.Collection">
            <summary>
            Get Added cookies
            </summary>
        </member>
        <member name="M:ServiceStack.Web.ICookies.DeleteCookie(System.String)">
            <summary>
            Adds an expired Set-Cookie instruction for clients to delete this Cookie
            </summary>
        </member>
        <member name="M:ServiceStack.Web.ICookies.AddPermanentCookie(System.String,System.String,System.Nullable{System.Boolean})">
            <summary>
            Adds a new Set-Cookie instruction for ss-pid
            </summary>
        </member>
        <member name="M:ServiceStack.Web.ICookies.AddSessionCookie(System.String,System.String,System.Nullable{System.Boolean})">
            <summary>
            Adds a new Set-Cookie instruction for ss-id
            </summary>
        </member>
        <member name="P:ServiceStack.Web.IRequestFilterBase.Priority">
            <summary>
            Order in which Request Filters are executed. 
            &lt;0 Executed before global request filters
            &gt;0 Executed after global request filters
            </summary>
        </member>
        <member name="M:ServiceStack.Web.IRequestFilterBase.Copy">
            <summary>
            A new shallow copy of this filter is used on every request.
            </summary>
            <returns></returns>
        </member>
        <member name="T:ServiceStack.Web.IHasRequestFilter">
            <summary>
            This interface can be implemented by an attribute
            which adds an request filter for the specific request DTO the attribute marked.
            </summary>
        </member>
        <member name="M:ServiceStack.Web.IHasRequestFilter.RequestFilter(ServiceStack.Web.IRequest,ServiceStack.Web.IResponse,System.Object)">
            <summary>
            The request filter is executed before the service.
            </summary>
            <param name="req">The http request wrapper</param>
            <param name="res">The http response wrapper</param>
            <param name="requestDto">The request DTO</param>
        </member>
        <member name="T:ServiceStack.Web.IHasRequestFilterAsync">
            <summary>
            This interface can be implemented by an attribute
            which adds an request filter for the specific request DTO the attribute marked.
            </summary>
        </member>
        <member name="M:ServiceStack.Web.IHasRequestFilterAsync.RequestFilterAsync(ServiceStack.Web.IRequest,ServiceStack.Web.IResponse,System.Object)">
            <summary>
            The request filter is executed before the service.
            </summary>
            <param name="req">The http request wrapper</param>
            <param name="res">The http response wrapper</param>
            <param name="requestDto">The request DTO</param>
        </member>
        <member name="P:ServiceStack.Web.IResponseFilterBase.Priority">
            <summary>
            Order in which Response Filters are executed. 
            &lt;0 Executed before global response filters
            &gt;0 Executed after global response filters
            </summary>
        </member>
        <member name="M:ServiceStack.Web.IResponseFilterBase.Copy">
            <summary>
            A new shallow copy of this filter is used on every request.
            </summary>
            <returns></returns>
        </member>
        <member name="T:ServiceStack.Web.IHasResponseFilter">
            <summary>
            This interface can be implemented by an attribute
            which adds an response filter for the specific response DTO the attribute marked.
            </summary>
        </member>
        <member name="M:ServiceStack.Web.IHasResponseFilter.ResponseFilter(ServiceStack.Web.IRequest,ServiceStack.Web.IResponse,System.Object)">
            <summary>
            The response filter is executed after the service
            </summary>
            <param name="req">The http request wrapper</param>
            <param name="res">The http response wrapper</param>
        </member>
        <member name="T:ServiceStack.Web.IHasResponseFilterAsync">
            <summary>
            This interface can be implemented by an attribute
            which adds an response filter for the specific response DTO the attribute marked.
            </summary>
        </member>
        <member name="M:ServiceStack.Web.IHasResponseFilterAsync.ResponseFilterAsync(ServiceStack.Web.IRequest,ServiceStack.Web.IResponse,System.Object)">
            <summary>
            The response filter is executed after the service
            </summary>
            <param name="req">The http request wrapper</param>
            <param name="res">The http response wrapper</param>
        </member>
        <member name="T:ServiceStack.Web.IHttpRequest">
            <summary>
            A thin wrapper around ASP.NET or HttpListener's HttpRequest
            </summary>
        </member>
        <member name="P:ServiceStack.Web.IHttpRequest.HttpResponse">
            <summary>
            The HttpResponse
            </summary>
        </member>
        <member name="P:ServiceStack.Web.IHttpRequest.HttpMethod">
            <summary>
            The HTTP Verb
            </summary>
        </member>
        <member name="P:ServiceStack.Web.IHttpRequest.XForwardedFor">
            <summary>
            The IP Address of the X-Forwarded-For header, null if null or empty
            </summary>
        </member>
        <member name="P:ServiceStack.Web.IHttpRequest.XForwardedPort">
            <summary>
            The Port number of the X-Forwarded-Port header, null if null or empty
            </summary>
        </member>
        <member name="P:ServiceStack.Web.IHttpRequest.XForwardedProtocol">
            <summary>
            The http or https scheme of the X-Forwarded-Proto header, null if null or empty
            </summary>
        </member>
        <member name="P:ServiceStack.Web.IHttpRequest.XRealIp">
            <summary>
            The value of the X-Real-IP header, null if null or empty
            </summary>
        </member>
        <member name="P:ServiceStack.Web.IHttpRequest.Accept">
            <summary>
            The value of the Accept HTTP Request Header
            </summary>
        </member>
        <member name="T:ServiceStack.Web.IHttpResponse">
            <summary>
            A thin wrapper around ASP.NET or HttpListener's HttpResponse
            </summary>
        </member>
        <member name="M:ServiceStack.Web.IHttpResponse.SetCookie(System.Net.Cookie)">
            <summary>
            Adds a new Set-Cookie instruction to Response
            </summary>
            <param name="cookie"></param>
        </member>
        <member name="M:ServiceStack.Web.IHttpResponse.ClearCookies">
            <summary>
            Removes all pending Set-Cookie instructions 
            </summary>
        </member>
        <member name="T:ServiceStack.Web.IHttpResult">
            <summary>
            Custom HTTP Response
            </summary>
        </member>
        <member name="P:ServiceStack.Web.IHttpResult.Status">
            <summary>
            The HTTP Response Status
            </summary>
        </member>
        <member name="P:ServiceStack.Web.IHttpResult.StatusCode">
            <summary>
            The HTTP Response Status Code
            </summary>
        </member>
        <member name="P:ServiceStack.Web.IHttpResult.StatusDescription">
            <summary>
            The HTTP Status Description
            </summary>
        </member>
        <member name="P:ServiceStack.Web.IHttpResult.ContentType">
            <summary>
            The HTTP Response ContentType
            </summary>
        </member>
        <member name="P:ServiceStack.Web.IHttpResult.Headers">
            <summary>
            Additional HTTP Headers
            </summary>
        </member>
        <member name="P:ServiceStack.Web.IHttpResult.Cookies">
            <summary>
            Additional HTTP Cookies
            </summary>
        </member>
        <member name="P:ServiceStack.Web.IHttpResult.Response">
            <summary>
            Response DTO
            </summary>
        </member>
        <member name="P:ServiceStack.Web.IHttpResult.ResponseFilter">
            <summary>
            if not provided, get's injected by ServiceStack
            </summary>
        </member>
        <member name="P:ServiceStack.Web.IHttpResult.RequestContext">
            <summary>
            Holds the request call context
            </summary>
        </member>
        <member name="P:ServiceStack.Web.IHttpResult.PaddingLength">
            <summary>
            The padding length written with the body, to be added to ContentLength of body
            </summary>
        </member>
        <member name="P:ServiceStack.Web.IHttpResult.ResultScope">
            <summary>
            Serialize the Response within the specified scope
            </summary>
        </member>
        <member name="P:ServiceStack.Web.IPartialWriter.IsPartialRequest">
            <summary>
            Whether this HttpResult allows Partial Response
            </summary>
        </member>
        <member name="M:ServiceStack.Web.IPartialWriter.WritePartialTo(ServiceStack.Web.IResponse)">
            <summary>
            Write a partial content result
            </summary>
        </member>
        <member name="P:ServiceStack.Web.IPartialWriterAsync.IsPartialRequest">
            <summary>
            Whether this HttpResult allows Partial Response
            </summary>
        </member>
        <member name="M:ServiceStack.Web.IPartialWriterAsync.WritePartialToAsync(ServiceStack.Web.IResponse,System.Threading.CancellationToken)">
            <summary>
            Write a partial content result
            </summary>
        </member>
        <member name="T:ServiceStack.Web.IRequest">
            <summary>
            A thin wrapper around each host's Request e.g: ASP.NET, HttpListener, MQ, etc
            </summary>
        </member>
        <member name="P:ServiceStack.Web.IRequest.OriginalRequest">
            <summary>
            The underlying ASP.NET or HttpListener HttpRequest
            </summary>
        </member>
        <member name="P:ServiceStack.Web.IRequest.Response">
            <summary>
            The Response API for this Request
            </summary>
        </member>
        <member name="P:ServiceStack.Web.IRequest.OperationName">
            <summary>
            The name of the service being called (e.g. Request DTO Name)
            </summary>
        </member>
        <member name="P:ServiceStack.Web.IRequest.Verb">
            <summary>
            The Verb / HttpMethod or Action for this request
            </summary>
        </member>
        <member name="P:ServiceStack.Web.IRequest.RequestAttributes">
            <summary>
            Different Attribute Enum flags classifying this Request
            </summary>
        </member>
        <member name="P:ServiceStack.Web.IRequest.RequestPreferences">
            <summary>
            Optional preferences for the processing of this Request
            </summary>
        </member>
        <member name="P:ServiceStack.Web.IRequest.Dto">
            <summary>
            The Request DTO, after it has been deserialized.
            </summary>
        </member>
        <member name="P:ServiceStack.Web.IRequest.ContentType">
            <summary>
            The request ContentType
            </summary>
        </member>
        <member name="P:ServiceStack.Web.IRequest.IsLocal">
            <summary>
            Whether this was an Internal Request
            </summary>
        </member>
        <member name="P:ServiceStack.Web.IRequest.UserAgent">
            <summary>
            The UserAgent for the request
            </summary>
        </member>
        <member name="P:ServiceStack.Web.IRequest.Cookies">
            <summary>
            A Dictionary of HTTP Cookies sent with this Request
            </summary>
        </member>
        <member name="P:ServiceStack.Web.IRequest.ResponseContentType">
            <summary>
            The expected Response ContentType for this request
            </summary>
        </member>
        <member name="P:ServiceStack.Web.IRequest.HasExplicitResponseContentType">
            <summary>
            Whether the ResponseContentType has been explicitly overridden or whether it was just the default
            </summary>
        </member>
        <member name="P:ServiceStack.Web.IRequest.Items">
            <summary>
            Attach any data to this request that all filters and services can access.
            </summary>
        </member>
        <member name="P:ServiceStack.Web.IRequest.Headers">
            <summary>
            The HTTP Headers in a NameValueCollection
            </summary>
        </member>
        <member name="P:ServiceStack.Web.IRequest.QueryString">
            <summary>
            The ?query=string in a NameValueCollection
            </summary>
        </member>
        <member name="P:ServiceStack.Web.IRequest.FormData">
            <summary>
            The HTTP POST'ed Form Data in a NameValueCollection
            </summary>
        </member>
        <member name="P:ServiceStack.Web.IRequest.UseBufferedStream">
            <summary>
            Buffer the Request InputStream so it can be re-read
            </summary>
        </member>
        <member name="M:ServiceStack.Web.IRequest.GetRawBody">
            <summary>
            The entire string contents of Request.InputStream
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Web.IRequest.GetRawBodyAsync">
            <summary>
            The entire string contents of Request.InputStream async
            </summary>
            <returns></returns>
        </member>
        <member name="P:ServiceStack.Web.IRequest.RawUrl">
            <summary>
            Relative URL containing /path/info?query=string
            </summary>
        </member>
        <member name="P:ServiceStack.Web.IRequest.AbsoluteUri">
            <summary>
            The Absolute URL for the request
            </summary>
        </member>
        <member name="P:ServiceStack.Web.IRequest.UserHostAddress">
            <summary>
            The Remote IP as reported by Request.UserHostAddress
            </summary>
        </member>
        <member name="P:ServiceStack.Web.IRequest.RemoteIp">
            <summary>
            The Remote Ip as reported by X-Forwarded-For, X-Real-IP or Request.UserHostAddress
            </summary>
        </member>
        <member name="P:ServiceStack.Web.IRequest.Authorization">
            <summary>
            The value of the Authorization Header used to send the Api Key, null if not available
            </summary>
        </member>
        <member name="P:ServiceStack.Web.IRequest.IsSecureConnection">
            <summary>
            e.g. is https or not
            </summary>
        </member>
        <member name="P:ServiceStack.Web.IRequest.AcceptTypes">
            <summary>
            Array of different Content-Types accepted by the client
            </summary>
        </member>
        <member name="P:ServiceStack.Web.IRequest.PathInfo">
            <summary>
            The normalized /path/info for the request
            </summary>
        </member>
        <member name="P:ServiceStack.Web.IRequest.OriginalPathInfo">
            <summary>
            The original /path/info as sent
            </summary>
        </member>
        <member name="P:ServiceStack.Web.IRequest.InputStream">
            <summary>
            The Request Body Input Stream
            </summary>
        </member>
        <member name="P:ServiceStack.Web.IRequest.ContentLength">
            <summary>
            The size of the Request Body if provided
            </summary>
        </member>
        <member name="P:ServiceStack.Web.IRequest.Files">
            <summary>
            Access to the multi-part/formdata files posted on this request
            </summary>
        </member>
        <member name="P:ServiceStack.Web.IRequest.UrlReferrer">
            <summary>
            The value of the Referrer, null if not available
            </summary>
        </member>
        <member name="T:ServiceStack.Web.IRequestLogger">
            <summary>
            Log every service request
            </summary>
        </member>
        <member name="P:ServiceStack.Web.IRequestLogger.EnableSessionTracking">
            <summary>
            Turn On/Off Session Tracking
            </summary>
        </member>
        <member name="P:ServiceStack.Web.IRequestLogger.EnableRequestBodyTracking">
            <summary>
            Turn On/Off Raw Request Body Tracking
            </summary>
        </member>
        <member name="P:ServiceStack.Web.IRequestLogger.RequestBodyTrackingFilter">
            <summary>
            Turn On/Off Raw Request Body Tracking per-request
            </summary>
        </member>
        <member name="P:ServiceStack.Web.IRequestLogger.EnableResponseTracking">
            <summary>
            Turn On/Off Tracking of Responses
            </summary>
        </member>
        <member name="P:ServiceStack.Web.IRequestLogger.ResponseTrackingFilter">
            <summary>
            Turn On/Off Tracking of Responses per-request
            </summary>
        </member>
        <member name="P:ServiceStack.Web.IRequestLogger.EnableErrorTracking">
            <summary>
            Turn On/Off Tracking of Exceptions
            </summary>
        </member>
        <member name="P:ServiceStack.Web.IRequestLogger.LimitToServiceRequests">
            <summary>
            Limit logging to only Service Requests
            </summary>
        </member>
        <member name="P:ServiceStack.Web.IRequestLogger.SkipLogging">
            <summary>
            Don't log matching requests
            </summary>
        </member>
        <member name="P:ServiceStack.Web.IRequestLogger.ExcludeRequestDtoTypes">
            <summary>
            Don't log requests of these types.
            </summary>
        </member>
        <member name="P:ServiceStack.Web.IRequestLogger.HideRequestBodyForRequestDtoTypes">
            <summary>
            Don't log request bodys for services with sensitive information.
            By default Auth and Registration requests are hidden.
            </summary>
        </member>
        <member name="P:ServiceStack.Web.IRequestLogger.ExcludeResponseTypes">
            <summary>
            Don't log Response DTO Types
            </summary>
        </member>
        <member name="P:ServiceStack.Web.IRequestLogger.RequestLogFilter">
            <summary>
            Customize Request Log Entry
            </summary>
        </member>
        <member name="P:ServiceStack.Web.IRequestLogger.IgnoreFilter">
            <summary>
            Customize which instances should not be serialized
            </summary>
        </member>
        <member name="P:ServiceStack.Web.IRequestLogger.CurrentDateFn">
            <summary>
            Change what DateTime to use for the current Date (defaults to UtcNow)
            </summary>
        </member>
        <member name="M:ServiceStack.Web.IRequestLogger.Log(ServiceStack.Web.IRequest,System.Object,System.Object,System.TimeSpan)">
            <summary>
            Log a request
            </summary>
            <param name="request">The RequestContext</param>
            <param name="requestDto">Request DTO</param>
            <param name="response">Response DTO or Exception</param>
            <param name="elapsed">How long did the Request take</param>
        </member>
        <member name="M:ServiceStack.Web.IRequestLogger.GetLatestLogs(System.Nullable{System.Int32})">
            <summary>
            View the most recent logs
            </summary>
            <param name="take"></param>
            <returns></returns>
        </member>
        <member name="T:ServiceStack.Web.IRequiresRequest">
            <summary>
            Implement on services that need access to the RequestContext
            </summary>
        </member>
        <member name="T:ServiceStack.Web.IRequiresRequestStream">
            <summary>
            Implement on Request DTOs that need access to the raw Request Stream
            </summary>
        </member>
        <member name="P:ServiceStack.Web.IRequiresRequestStream.RequestStream">
            <summary>
            The raw Http Request Input Stream
            </summary>
        </member>
        <member name="T:ServiceStack.Web.IResponse">
            <summary>
            A thin wrapper around each host's Response e.g: ASP.NET, HttpListener, MQ, etc
            </summary>
        </member>
        <member name="P:ServiceStack.Web.IResponse.OriginalResponse">
            <summary>
            The underlying ASP.NET, .NET Core or HttpListener HttpResponse
            </summary>
        </member>
        <member name="P:ServiceStack.Web.IResponse.Request">
            <summary>
            The corresponding IRequest API for this Response
            </summary>
        </member>
        <member name="P:ServiceStack.Web.IResponse.StatusCode">
            <summary>
            The Response Status Code
            </summary>
        </member>
        <member name="P:ServiceStack.Web.IResponse.StatusDescription">
            <summary>
            The Response Status Description
            </summary>
        </member>
        <member name="P:ServiceStack.Web.IResponse.ContentType">
            <summary>
            The Content-Type for this Response
            </summary>
        </member>
        <member name="M:ServiceStack.Web.IResponse.AddHeader(System.String,System.String)">
            <summary>
            Add a Header to this Response
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:ServiceStack.Web.IResponse.RemoveHeader(System.String)">
            <summary>
            Remove an existing Header added on this Response
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:ServiceStack.Web.IResponse.GetHeader(System.String)">
            <summary>
            Get an existing Header added to this Response
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:ServiceStack.Web.IResponse.Redirect(System.String)">
            <summary>
            Return a Redirect Response to the URL specified
            </summary>
            <param name="url"></param>
        </member>
        <member name="P:ServiceStack.Web.IResponse.OutputStream">
            <summary>
            The Response Body Output Stream
            </summary>
        </member>
        <member name="P:ServiceStack.Web.IResponse.Dto">
            <summary>
            The Response DTO
            </summary>
        </member>
        <member name="P:ServiceStack.Web.IResponse.UseBufferedStream">
            <summary>
            Buffer the Response OutputStream so it can be written in 1 batch
            </summary>
        </member>
        <member name="M:ServiceStack.Web.IResponse.Close">
            <summary>
            Signal that this response has been handled and no more processing should be done.
            When used in a request or response filter, no more filters or processing is done on this request.
            </summary>
        </member>
        <member name="M:ServiceStack.Web.IResponse.CloseAsync(System.Threading.CancellationToken)">
            <summary>
            Close this Response Output Stream Async
            </summary>
        </member>
        <member name="M:ServiceStack.Web.IResponse.End">
            <summary>
            Calls Response.End() on ASP.NET HttpResponse otherwise is an alias for Close().
            Useful when you want to prevent ASP.NET to provide it's own custom error page.
            </summary>
        </member>
        <member name="M:ServiceStack.Web.IResponse.Flush">
            <summary>
            Response.Flush() and OutputStream.Flush() seem to have different behaviour in ASP.NET
            </summary>
        </member>
        <member name="M:ServiceStack.Web.IResponse.FlushAsync(System.Threading.CancellationToken)">
            <summary>
            Flush this Response Output Stream Async
            </summary>
        </member>
        <member name="P:ServiceStack.Web.IResponse.IsClosed">
            <summary>
            Gets a value indicating whether this instance is closed.
            </summary>
        </member>
        <member name="M:ServiceStack.Web.IResponse.SetContentLength(System.Int64)">
            <summary>
            Set the Content Length in Bytes for this Response
            </summary>
            <param name="contentLength"></param>
        </member>
        <member name="P:ServiceStack.Web.IResponse.KeepAlive">
            <summary>
            Whether the underlying TCP Connection for this Response should remain open
            </summary>
        </member>
        <member name="P:ServiceStack.Web.IResponse.HasStarted">
            <summary>
            Whether the HTTP Response Headers have already been written.
            </summary>
        </member>
        <member name="T:ServiceStack.Web.IServiceController">
            <summary>
            Responsible for executing the operation within the specified context.
            </summary>
            <value>The operation types.</value>
        </member>
        <member name="M:ServiceStack.Web.IServiceController.GetRestPathForRequest(System.String,System.String)">
            <summary>
            Returns the first matching RestPath
            </summary>
        </member>
        <member name="M:ServiceStack.Web.IServiceController.ExecuteMessage(ServiceStack.Messaging.IMessage)">
            <summary>
            Executes the MQ DTO request.
            </summary>
        </member>
        <member name="M:ServiceStack.Web.IServiceController.ExecuteMessage(ServiceStack.Messaging.IMessage,ServiceStack.Web.IRequest)">
            <summary>
            Executes the MQ DTO request with the supplied request context
            </summary>
        </member>
        <member name="M:ServiceStack.Web.IServiceController.Execute(System.Object,ServiceStack.Web.IRequest)">
            <summary>
            Executes the DTO request under the supplied request context.
            </summary>
        </member>
        <member name="M:ServiceStack.Web.IServiceController.Execute(System.Object,ServiceStack.Web.IRequest,System.Boolean)">
            <summary>
            Executes the DTO request under supplied context and option to Execute Request/Response Filters.
            </summary>
        </member>
        <member name="M:ServiceStack.Web.IServiceController.Execute(System.Object)">
            <summary>
            Executes the DTO request with an empty request context.
            </summary>
        </member>
        <member name="M:ServiceStack.Web.IServiceController.Execute(ServiceStack.Web.IRequest,System.Boolean)">
            <summary>
            Executes the DTO request with the current HttpRequest and option to Execute Request/Response Filters.
            </summary>
        </member>
        <member name="M:ServiceStack.Web.IServiceController.GatewayExecuteAsync(System.Object,ServiceStack.Web.IRequest,System.Boolean)">
            <summary>
            Execute Service Gateway Requests
            </summary>
        </member>
        <member name="M:ServiceStack.Web.IServiceExecutor.ExecuteAsync(System.Object,ServiceStack.Web.IRequest)">
            <summary>
            Executes the DTO request under the supplied request context.
            </summary>
        </member>
        <member name="T:ServiceStack.Web.IServiceRoutes">
            <summary>
            Allow the registration of user-defined routes for services
            </summary>
        </member>
        <member name="M:ServiceStack.Web.IServiceRoutes.Add``1(System.String)">
            <summary>
            	Maps the specified REST path to the specified request DTO.
            </summary>
            <typeparam name="TRequest">The type of request DTO to map 
            	the path to.</typeparam>
            <param name="restPath">The path to map the request DTO to.
            	See <see cref="P:ServiceStack.RouteAttribute.Path">RouteAttribute.Path</see>
            	for details on the correct format.</param>
            <returns>The same <see cref="T:ServiceStack.Web.IServiceRoutes"/> instance;
            	never <see langword="null"/>.</returns>
        </member>
        <member name="M:ServiceStack.Web.IServiceRoutes.Add``1(System.String,System.String)">
            <summary>
            	Maps the specified REST path to the specified request DTO, and
            	specifies the HTTP verbs supported by the path.
            </summary>
            <typeparam name="TRequest">The type of request DTO to map 
            	the path to.</typeparam>
            <param name="restPath">The path to map the request DTO to.
            	See <see cref="P:ServiceStack.RouteAttribute.Path">RouteAttribute.Path</see>
            	for details on the correct format.</param>
            <param name="verbs">
            	The comma-delimited list of HTTP verbs supported by the path, 
            	such as "GET,PUT,DELETE".  Specify empty or <see langword="null"/>
            	to indicate that all verbs are supported.
            </param>
            <returns>The same <see cref="T:ServiceStack.Web.IServiceRoutes"/> instance;
            	never <see langword="null"/>.</returns>
        </member>
        <member name="M:ServiceStack.Web.IServiceRoutes.Add(System.Type,System.String,System.String)">
            <summary>
            	Maps the specified REST path to the specified request DTO, 
            	specifies the HTTP verbs supported by the path, and indicates
            	the default MIME type of the returned response.
            </summary>
            <param name="requestType">
            	The type of request DTO to map the path to.
            </param>
            <param name="restPath">The path to map the request DTO to.
            	See <see cref="P:ServiceStack.RouteAttribute.Path">RouteAttribute.Path</see>
            	for details on the correct format.</param>
            <param name="verbs">
            	The comma-delimited list of HTTP verbs supported by the path, 
            	such as "GET,PUT,DELETE".
            </param>
            <returns>The same <see cref="T:ServiceStack.Web.IServiceRoutes"/> instance;
            	never <see langword="null"/>.</returns>
        </member>
        <member name="M:ServiceStack.Web.IServiceRoutes.Add(System.Type,System.String,System.String,System.Int32)">
            <summary>
            	Maps the specified REST path to the specified request DTO, 
            	specifies the HTTP verbs supported by the path, and indicates
            	the default MIME type of the returned response.
            </summary>
            <param name="priority">
                Used to rank the precedences of route definitions in reverse routing. 
                i.e. Priorities below 0 are auto-generated have less precedence.
            </param>
        </member>
        <member name="M:ServiceStack.Web.IServiceRoutes.Add(System.Type,System.String,System.String,System.String,System.String)">
            <summary>
            	Maps the specified REST path to the specified request DTO, 
            	specifies the HTTP verbs supported by the path, and indicates
            	the default MIME type of the returned response.
            </summary>
            <param name="requestType">
            	The type of request DTO to map the path to.
            </param>
            <param name="restPath">The path to map the request DTO to.
            	See <see cref="P:ServiceStack.RouteAttribute.Path">RouteAttribute.Path</see>
            	for details on the correct format.</param>
            <param name="verbs">
            	The comma-delimited list of HTTP verbs supported by the path, 
            	such as "GET,PUT,DELETE".
            </param>
            <param name="summary">
                A short summary of what the API does 
            </param>
            <param name="notes">
                A longer description to explain the behaviour of the API 
            </param>
            <returns>The same <see cref="T:ServiceStack.Web.IServiceRoutes"/> instance;
            	never <see langword="null"/>.</returns>
        </member>
        <member name="M:ServiceStack.Web.IServiceRoutes.Add(System.Type,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            	Maps the specified REST path to the specified request DTO, 
            	specifies the HTTP verbs supported by the path, and indicates
            	the default MIME type of the returned response.
            </summary>
            <param name="requestType">
            	The type of request DTO to map the path to.
            </param>
            <param name="restPath">The path to map the request DTO to.
            	See <see cref="P:ServiceStack.RouteAttribute.Path">RouteAttribute.Path</see>
            	for details on the correct format.</param>
            <param name="verbs">
            	The comma-delimited list of HTTP verbs supported by the path, 
            	such as "GET,PUT,DELETE".
            </param>
            <param name="summary">
                A short summary of what the API does 
            </param>
            <param name="notes">
                A longer description to explain the behaviour of the API 
            </param>
            <param name="matches">
                Must match rule defined in Config.RequestRules or Regex expression with format: 
                "{IHttpRequest.Field} =~ {pattern}", e.g "PathInfo =~ \/[0-9]+$"
            </param>
            <returns>The same <see cref="T:ServiceStack.Web.IServiceRoutes"/> instance;
            	never <see langword="null"/>.</returns>
        </member>
        <member name="T:ServiceStack.Workers">
            <summary>
            Worker Thread names
            </summary>
        </member>
        <member name="F:ServiceStack.Workers.AppDb">
            <summary>
            Worker name for OrmLite default DB Connection
            </summary>
        </member>
        <member name="T:ServiceStack.Locks">
            <summary>
            Maintain Locks 
            </summary>
        </member>
        <member name="T:ServiceStack.WorkerAttribute">
            <summary>
            Execute AutoQuery Create/Update/Delete Request DTO in a background thread
            </summary>
        </member>
        <member name="M:ServiceStack.WorkerAttribute.#ctor(System.String)">
            <summary>
            Execute AutoQuery Create/Update/Delete Request DTO in a background thread
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.CanBeNullAttribute">
            <summary>
            Indicates that the value of the marked element could be <c>null</c> sometimes,
            so the check for <c>null</c> is necessary before its usage.
            </summary>
            <example><code>
            [CanBeNull] object Test() => null;
            
            void UseTest() {
              var p = Test();
              var s = p.ToString(); // Warning: Possible 'System.NullReferenceException'
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.NotNullAttribute">
            <summary>
            Indicates that the value of the marked element could never be <c>null</c>.
            </summary>
            <example><code>
            [NotNull] object Foo() {
              return null; // Warning: Possible 'null' assignment
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.ItemNotNullAttribute">
            <summary>
            Can be applied to symbols of types derived from IEnumerable as well as to symbols of Task
            and Lazy classes to indicate that the value of a collection item, of the Task.Result property
            or of the Lazy.Value property can never be null.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.ItemCanBeNullAttribute">
            <summary>
            Can be appplied to symbols of types derived from IEnumerable as well as to symbols of Task
            and Lazy classes to indicate that the value of a collection item, of the Task.Result property
            or of the Lazy.Value property can be null.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.StringFormatMethodAttribute">
            <summary>
            Indicates that the marked method builds string by format pattern and (optional) arguments.
            Parameter, which contains format string, should be given in constructor. The format string
            should be in <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"/>-like form.
            </summary>
            <example><code>
            [StringFormatMethod("message")]
            void ShowError(string message, params object[] args) { /* do something */ }
            
            void Foo() {
              ShowError("Failed: {0}"); // Warning: Non-existing argument in format string
            }
            </code></example>
        </member>
        <member name="M:JetBrains.Annotations.StringFormatMethodAttribute.#ctor(System.String)">
            <param name="formatParameterName">
            Specifies which parameter of an annotated method should be treated as format-string
            </param>
        </member>
        <member name="T:JetBrains.Annotations.ValueProviderAttribute">
            <summary>
            For a parameter that is expected to be one of the limited set of values.
            Specify fields of which type should be used as values for this parameter.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.InvokerParameterNameAttribute">
            <summary>
            Indicates that the function argument should be string literal and match one
            of the parameters of the caller function. For example, ReSharper annotates
            the parameter of <see cref="T:System.ArgumentNullException"/>.
            </summary>
            <example><code>
            void Foo(string param) {
              if (param == null)
                throw new ArgumentNullException("par"); // Warning: Cannot resolve symbol
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.NotifyPropertyChangedInvocatorAttribute">
             <summary>
             Indicates that the method is contained in a type that implements
             <c>System.ComponentModel.INotifyPropertyChanged</c> interface and this method
             is used to notify that some property value changed.
             </summary>
             <remarks>
             The method should be non-static and conform to one of the supported signatures:
             <list>
             <item><c>NotifyChanged(string)</c></item>
             <item><c>NotifyChanged(params string[])</c></item>
             <item><c>NotifyChanged{T}(Expression{Func{T}})</c></item>
             <item><c>NotifyChanged{T,U}(Expression{Func{T,U}})</c></item>
             <item><c>SetProperty{T}(ref T, T, string)</c></item>
             </list>
             </remarks>
             <example><code>
             public class Foo : INotifyPropertyChanged {
               public event PropertyChangedEventHandler PropertyChanged;
             
               [NotifyPropertyChangedInvocator]
               protected virtual void NotifyChanged(string propertyName) { ... }
            
               string _name;
             
               public string Name {
                 get { return _name; }
                 set { _name = value; NotifyChanged("LastName"); /* Warning */ }
               }
             }
             </code>
             Examples of generated notifications:
             <list>
             <item><c>NotifyChanged("Property")</c></item>
             <item><c>NotifyChanged(() =&gt; Property)</c></item>
             <item><c>NotifyChanged((VM x) =&gt; x.Property)</c></item>
             <item><c>SetProperty(ref myField, value, "Property")</c></item>
             </list>
             </example>
        </member>
        <member name="T:JetBrains.Annotations.ContractAnnotationAttribute">
            <summary>
            Describes dependency between method input and output.
            </summary>
            <syntax>
            <p>Function Definition Table syntax:</p>
            <list>
            <item>FDT      ::= FDTRow [;FDTRow]*</item>
            <item>FDTRow   ::= Input =&gt; Output | Output &lt;= Input</item>
            <item>Input    ::= ParameterName: Value [, Input]*</item>
            <item>Output   ::= [ParameterName: Value]* {halt|stop|void|nothing|Value}</item>
            <item>Value    ::= true | false | null | notnull | canbenull</item>
            </list>
            If method has single input parameter, it's name could be omitted.<br/>
            Using <c>halt</c> (or <c>void</c>/<c>nothing</c>, which is the same) for method output
            means that the methos doesn't return normally (throws or terminates the process).<br/>
            Value <c>canbenull</c> is only applicable for output parameters.<br/>
            You can use multiple <c>[ContractAnnotation]</c> for each FDT row, or use single attribute
            with rows separated by semicolon. There is no notion of order rows, all rows are checked
            for applicability and applied per each program state tracked by R# analysis.<br/>
            </syntax>
            <examples><list>
            <item><code>
            [ContractAnnotation("=&gt; halt")]
            public void TerminationMethod()
            </code></item>
            <item><code>
            [ContractAnnotation("halt &lt;= condition: false")]
            public void Assert(bool condition, string text) // regular assertion method
            </code></item>
            <item><code>
            [ContractAnnotation("s:null =&gt; true")]
            public bool IsNullOrEmpty(string s) // string.IsNullOrEmpty()
            </code></item>
            <item><code>
            // A method that returns null if the parameter is null,
            // and not null if the parameter is not null
            [ContractAnnotation("null =&gt; null; notnull =&gt; notnull")]
            public object Transform(object data) 
            </code></item>
            <item><code>
            [ContractAnnotation("=&gt; true, result: notnull; =&gt; false, result: null")]
            public bool TryParse(string s, out Person result)
            </code></item>
            </list></examples>
        </member>
        <member name="T:JetBrains.Annotations.LocalizationRequiredAttribute">
            <summary>
            Indicates that marked element should be localized or not.
            </summary>
            <example><code>
            [LocalizationRequiredAttribute(true)]
            class Foo {
              string str = "my string"; // Warning: Localizable string
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.CannotApplyEqualityOperatorAttribute">
            <summary>
            Indicates that the value of the marked type (or its derivatives)
            cannot be compared using '==' or '!=' operators and <c>Equals()</c>
            should be used instead. However, using '==' or '!=' for comparison
            with <c>null</c> is always permitted.
            </summary>
            <example><code>
            [CannotApplyEqualityOperator]
            class NoEquality { }
            
            class UsesNoEquality {
              void Test() {
                var ca1 = new NoEquality();
                var ca2 = new NoEquality();
                if (ca1 != null) { // OK
                  bool condition = ca1 == ca2; // Warning
                }
              }
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.BaseTypeRequiredAttribute">
            <summary>
            When applied to a target attribute, specifies a requirement for any type marked
            with the target attribute to implement or inherit specific type or types.
            </summary>
            <example><code>
            [BaseTypeRequired(typeof(IComponent)] // Specify requirement
            class ComponentAttribute : Attribute { }
            
            [Component] // ComponentAttribute requires implementing IComponent interface
            class MyComponent : IComponent { }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.UsedImplicitlyAttribute">
            <summary>
            Indicates that the marked symbol is used implicitly (e.g. via reflection, in external library),
            so this symbol will not be marked as unused (as well as by other usage inspections).
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.MeansImplicitUseAttribute">
            <summary>
            Should be used on attributes and causes ReSharper to not mark symbols marked with such attributes
            as unused (as well as by other usage inspections)
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.Access">
            <summary>Only entity marked with attribute considered used.</summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.Assign">
            <summary>Indicates implicit assignment to a member.</summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.InstantiatedWithFixedConstructorSignature">
            <summary>
            Indicates implicit instantiation of a type with fixed constructor signature.
            That means any unused constructor parameters won't be reported as such.
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.InstantiatedNoFixedConstructorSignature">
            <summary>Indicates implicit instantiation of a type.</summary>
        </member>
        <member name="T:JetBrains.Annotations.ImplicitUseTargetFlags">
            <summary>
            Specify what is considered used implicitly when marked
            with <see cref="T:JetBrains.Annotations.MeansImplicitUseAttribute"/> or <see cref="T:JetBrains.Annotations.UsedImplicitlyAttribute"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseTargetFlags.Members">
            <summary>Members of entity marked with attribute are considered used.</summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseTargetFlags.WithMembers">
            <summary>Entity marked with attribute and all its members considered used.</summary>
        </member>
        <member name="T:JetBrains.Annotations.PublicAPIAttribute">
            <summary>
            This attribute is intended to mark publicly available API
            which should not be removed and so is treated as used.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.InstantHandleAttribute">
            <summary>
            Tells code analysis engine if the parameter is completely handled when the invoked method is on stack.
            If the parameter is a delegate, indicates that delegate is executed while the method is executed.
            If the parameter is an enumerable, indicates that it is enumerated while the method is executed.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.PureAttribute">
            <summary>
            Indicates that a method does not make any observable state changes.
            The same as <c>System.Diagnostics.Contracts.PureAttribute</c>.
            </summary>
            <example><code>
            [Pure] int Multiply(int x, int y) => x * y;
            
            void M() {
              Multiply(123, 42); // Waring: Return value of pure method is not used
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.MustUseReturnValueAttribute">
            <summary>
            Indicates that the return value of method invocation must be used.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.ProvidesContextAttribute">
            <summary>
            Indicates the type member or parameter of some type, that should be used instead of all other ways
            to get the value that type. This annotation is useful when you have some "context" value evaluated
            and stored somewhere, meaning that all other ways to get this value must be consolidated with existing one.
            </summary>
            <example><code>
            class Foo {
              [ProvidesContext] IBarService _barService = ...;
            
              void ProcessNode(INode node) {
                DoSomething(node, node.GetGlobalServices().Bar);
                //              ^ Warning: use value of '_barService' field
              }
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.PathReferenceAttribute">
            <summary>
            Indicates that a parameter is a path to a file or a folder within a web project.
            Path can be relative or absolute, starting from web root (~).
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.SourceTemplateAttribute">
            <summary>
            An extension method marked with this attribute is processed by ReSharper code completion
            as a 'Source Template'. When extension method is completed over some expression, it's source code
            is automatically expanded like a template at call site.
            </summary>
            <remarks>
            Template method body can contain valid source code and/or special comments starting with '$'.
            Text inside these comments is added as source code when the template is applied. Template parameters
            can be used either as additional method parameters or as identifiers wrapped in two '$' signs.
            Use the <see cref="T:JetBrains.Annotations.MacroAttribute"/> attribute to specify macros for parameters.
            </remarks>
            <example>
            In this example, the 'forEach' method is a source template available over all values
            of enumerable types, producing ordinary C# 'foreach' statement and placing caret inside block:
            <code>
            [SourceTemplate]
            public static void forEach&lt;T&gt;(this IEnumerable&lt;T&gt; xs) {
              foreach (var x in xs) {
                 //$ $END$
              }
            }
            </code>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.MacroAttribute">
            <summary>
            Allows specifying a macro for a parameter of a <see cref="T:JetBrains.Annotations.SourceTemplateAttribute">source template</see>.
            </summary>
            <remarks>
            You can apply the attribute on the whole method or on any of its additional parameters. The macro expression
            is defined in the <see cref="P:JetBrains.Annotations.MacroAttribute.Expression"/> property. When applied on a method, the target
            template parameter is defined in the <see cref="P:JetBrains.Annotations.MacroAttribute.Target"/> property. To apply the macro silently
            for the parameter, set the <see cref="P:JetBrains.Annotations.MacroAttribute.Editable"/> property value = -1.
            </remarks>
            <example>
            Applying the attribute on a source template method:
            <code>
            [SourceTemplate, Macro(Target = "item", Expression = "suggestVariableName()")]
            public static void forEach&lt;T&gt;(this IEnumerable&lt;T&gt; collection) {
              foreach (var item in collection) {
                //$ $END$
              }
            }
            </code>
            Applying the attribute on a template method parameter:
            <code>
            [SourceTemplate]
            public static void something(this Entity x, [Macro(Expression = "guid()", Editable = -1)] string newguid) {
              /*$ var $x$Id = "$newguid$" + x.ToString();
              x.DoSomething($x$Id); */
            }
            </code>
            </example>
        </member>
        <member name="P:JetBrains.Annotations.MacroAttribute.Expression">
            <summary>
            Allows specifying a macro that will be executed for a <see cref="T:JetBrains.Annotations.SourceTemplateAttribute">source template</see>
            parameter when the template is expanded.
            </summary>
        </member>
        <member name="P:JetBrains.Annotations.MacroAttribute.Editable">
            <summary>
            Allows specifying which occurrence of the target parameter becomes editable when the template is deployed.
            </summary>
            <remarks>
            If the target parameter is used several times in the template, only one occurrence becomes editable;
            other occurrences are changed synchronously. To specify the zero-based index of the editable occurrence,
            use values >= 0. To make the parameter non-editable when the template is expanded, use -1.
            </remarks>>
        </member>
        <member name="P:JetBrains.Annotations.MacroAttribute.Target">
            <summary>
            Identifies the target parameter of a <see cref="T:JetBrains.Annotations.SourceTemplateAttribute">source template</see> if the
            <see cref="T:JetBrains.Annotations.MacroAttribute"/> is applied on a template method.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcActionAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC action. If applied to a method, the MVC action name is calculated
            implicitly from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcAreaAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC area.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcControllerAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter is
            an MVC controller. If applied to a method, the MVC controller name is calculated
            implicitly from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcMasterAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC Master. Use this attribute
            for custom wrappers similar to <c>System.Web.Mvc.Controller.View(String, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcModelTypeAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC model type. Use this attribute
            for custom wrappers similar to <c>System.Web.Mvc.Controller.View(String, Object)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcPartialViewAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter is an MVC
            partial view. If applied to a method, the MVC partial view name is calculated implicitly
            from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.RenderPartialExtensions.RenderPartial(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcSuppressViewErrorAttribute">
            <summary>
            ASP.NET MVC attribute. Allows disabling inspections for MVC views within a class or a method.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcDisplayTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC display template.
            Use this attribute for custom wrappers similar to 
            <c>System.Web.Mvc.Html.DisplayExtensions.DisplayForModel(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcEditorTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC editor template.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.EditorExtensions.EditorForModel(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC template.
            Use this attribute for custom wrappers similar to
            <c>System.ComponentModel.DataAnnotations.UIHintAttribute(System.String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcViewAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC view component. If applied to a method, the MVC view name is calculated implicitly
            from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Controller.View(Object)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcViewComponentAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC view component name.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcViewComponentViewAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC view component view. If applied to a method, the MVC view component view name is default.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcActionSelectorAttribute">
            <summary>
            ASP.NET MVC attribute. When applied to a parameter of an attribute,
            indicates that this parameter is an MVC action name.
            </summary>
            <example><code>
            [ActionName("Foo")]
            public ActionResult Login(string returnUrl) {
              ViewBag.ReturnUrl = Url.Action("Foo"); // OK
              return RedirectToAction("Bar"); // Error: Cannot resolve action
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.RazorSectionAttribute">
            <summary>
            Razor attribute. Indicates that a parameter or a method is a Razor section.
            Use this attribute for custom wrappers similar to 
            <c>System.Web.WebPages.WebPageBase.RenderSection(String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.CollectionAccessAttribute">
            <summary>
            Indicates how method, constructor invocation or property access
            over collection type affects content of the collection.
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.CollectionAccessType.None">
            <summary>Method does not use or modify content of the collection.</summary>
        </member>
        <member name="F:JetBrains.Annotations.CollectionAccessType.Read">
            <summary>Method only reads content of the collection but does not modify it.</summary>
        </member>
        <member name="F:JetBrains.Annotations.CollectionAccessType.ModifyExistingContent">
            <summary>Method can change content of the collection but does not add new elements.</summary>
        </member>
        <member name="F:JetBrains.Annotations.CollectionAccessType.UpdatedContent">
            <summary>Method can add new elements to the collection.</summary>
        </member>
        <member name="T:JetBrains.Annotations.AssertionMethodAttribute">
            <summary>
            Indicates that the marked method is assertion method, i.e. it halts control flow if
            one of the conditions is satisfied. To set the condition, mark one of the parameters with 
            <see cref="T:JetBrains.Annotations.AssertionConditionAttribute"/> attribute.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AssertionConditionAttribute">
            <summary>
            Indicates the condition parameter of the assertion method. The method itself should be
            marked by <see cref="T:JetBrains.Annotations.AssertionMethodAttribute"/> attribute. The mandatory argument of
            the attribute is the assertion type.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AssertionConditionType">
            <summary>
            Specifies assertion type. If the assertion method argument satisfies the condition,
            then the execution continues. Otherwise, execution is assumed to be halted.
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IS_TRUE">
            <summary>Marked parameter should be evaluated to true.</summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IS_FALSE">
            <summary>Marked parameter should be evaluated to false.</summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IS_NULL">
            <summary>Marked parameter should be evaluated to null value.</summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IS_NOT_NULL">
            <summary>Marked parameter should be evaluated to not null value.</summary>
        </member>
        <member name="T:JetBrains.Annotations.LinqTunnelAttribute">
            <summary>
            Indicates that method is pure LINQ method, with postponed enumeration (like Enumerable.Select,
            .Where). This annotation allows inference of [InstantHandle] annotation for parameters
            of delegate type by analyzing LINQ method chains.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.NoEnumerationAttribute">
            <summary>
            Indicates that IEnumerable, passed as parameter, is not enumerated.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.RegexPatternAttribute">
            <summary>
            Indicates that parameter is regular expression pattern.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.NoReorderAttribute">
            <summary>
            Prevents the Member Reordering feature from tossing members of the marked class.
            </summary>
            <remarks>
            The attribute must be mentioned in your member reordering patterns
            </remarks>
        </member>
        <member name="T:JetBrains.Annotations.XamlItemsControlAttribute">
            <summary>
            XAML attribute. Indicates the type that has <c>ItemsSource</c> property and should be treated
            as <c>ItemsControl</c>-derived type, to enable inner items <c>DataContext</c> type resolve.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.XamlItemBindingOfItemsControlAttribute">
            <summary>
            XAML attribute. Indicates the property of some <c>BindingBase</c>-derived type, that
            is used to bind some item of <c>ItemsControl</c>-derived type. This annotation will
            enable the <c>DataContext</c> type resolve for XAML bindings for such properties.
            </summary>
            <remarks>
            Property should have the tree ancestor of the <c>ItemsControl</c> type or
            marked with the <see cref="T:JetBrains.Annotations.XamlItemsControlAttribute"/> attribute.
            </remarks>
        </member>
        <member name="T:IRedisResolver">
            <summary>
            Resolver strategy for resolving hosts and creating clients
            </summary>
        </member>
        <member name="P:IRedisResolver.PrimaryEndpoint">
            <summary>
            Master Redis Server Endpoint Info 
            </summary>
        </member>
    </members>
</doc>
